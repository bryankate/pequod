### @configure_input@

AR = ar
CC = @CC@
CXX = @CXX@

CXXFLAGS = -W -Wall @CXXFLAGS@

DEPSDIR := .deps
DEPCFLAGS = -MD -MF $(DEPSDIR)/$*.d -MP
top_srcdir = @top_srcdir@
builddir = .

SRCDIR = $(top_srcdir)/src
OBJDIR = obj
PROTOSRCDIR = $(top_srcdir)/proto
PROTOGENDIR = $(OBJDIR)

TAMER_COMMIT = be89f923de503d9dcc58ec1f582967420991a905

INCLUDES = -include config.h -I$(top_srcdir)/lib -I$(PROTOGENDIR)
LIBS = -lboost_program_options-mt -lboost_thread-mt \
	-lboost_system-mt -lboost_serialization-mt \
	-lev -lprotobuf @MALLOC_LIBS@ @POSTGRES_LIBS@ @MEMCACHED_LIB@

CXXFLAGS += -I/opt/local/include -I$(top_srcdir)/src -I$(top_srcdir)/tamer
LDFLAGS += -L/usr/local/lib -L/opt/local/lib

@DEFAULT_MALLOC_ASSIGNMENT@
ifeq ($(shell uname), Darwin)
  # turn off some warnings from clang regarding libev sources - very annoying
  CXXFLAGS += -Wno-mismatched-tags -Wno-ambiguous-member-template
ifndef DEFAULT_MALLOC
  CXXFLAGS += -fno-builtin
endif
else
ifndef DEFAULT_MALLOC
  CXXFLAGS += -fno-builtin-malloc -fno-builtin-calloc -fno-builtin-realloc -fno-builtin-free
endif
endif

ifdef ITRACE
  CXXFLAGS += -DIVAL_TRACE
endif

CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CXXFLAGS)
CXXLINK = $(CXX) $(CXXFLAGS)

TAMER = tamer/compiler/tamer
LIBTAMER = tamer/tamer/.libs/libtamer.a


all:    $(OBJDIR)/pqserver

$(PROTOGENDIR)/%.pb.cc $(PROTOGENDIR)/%.pb.h: $(PROTOSRCDIR)/%.proto \
		$(PROTOGENDIR)/stamp $(DEPSDIR)/stamp
	protoc --cpp_out=$(PROTOGENDIR) --python_out=exp -I$(PROTOSRCDIR) $<

$(PROTOGENDIR)/%.px.cc $(PROTOGENDIR)/%.px.hh: $(PROTOSRCDIR)/%.proto \
		$(PROTOGENDIR)/stamp $(DEPSDIR)/stamp $(PROTOSRCDIR)/protox.pl
	$(PROTOSRCDIR)/protox.pl --cpp_out=$(PROTOGENDIR) $<

$(OBJDIR)/%.o: $(top_srcdir)/lib/%.cc config.h $(OBJDIR)/stamp $(DEPSDIR)/stamp
	$(CXXCOMPILE) $(DEPCFLAGS) -c -o $@ $<

$(OBJDIR)/%.o: $(top_srcdir)/lib/%.c config.h $(OBJDIR)/stamp $(DEPSDIR)/stamp
	$(CXXCOMPILE) $(DEPCFLAGS) -c -o $@ $<

$(OBJDIR)/%.o: $(top_srcdir)/src/%.cc config.h $(OBJDIR)/stamp $(DEPSDIR)/stamp
	$(CXXCOMPILE) $(DEPCFLAGS) -c -o $@ $<

$(OBJDIR)/%.o: $(OBJDIR)/%.cc config.h $(OBJDIR)/stamp $(DEPSDIR)/stamp
	$(CXXCOMPILE) $(DEPCFLAGS) -c -o $@ $<

$(OBJDIR)/%.cc: $(top_srcdir)/src/%.tcc config.h $(OBJDIR)/stamp $(DEPSDIR)/stamp $(TAMER)
	$(TAMER) -o $@ $<

$(OBJDIR)/%.hh: $(top_srcdir)/src/%.thh config.h $(OBJDIR)/stamp $(DEPSDIR)/stamp $(TAMER)
	$(TAMER) -o $@ $<

$(OBJDIR)/pqserver.o: $(OBJDIR)/pqtwitter.hh $(OBJDIR)/pqhackernews.hh
$(OBJDIR)/pqtwitter.o: $(OBJDIR)/pqtwitter.cc $(OBJDIR)/pqtwitter.hh $(OBJDIR)/pqremoteclient.hh $(OBJDIR)/mpfd.hh
$(OBJDIR)/pqhackernews.o: $(OBJDIR)/pqhackernews.hh $(OBJDIR)/pqremoteclient.hh $(OBJDIR)/mpfd.hh
$(OBJDIR)/util.o: $(PROTOGENDIR)/gstore.px.hh
$(OBJDIR)/mpfd.o: $(OBJDIR)/mpfd.cc $(OBJDIR)/mpfd.hh
$(OBJDIR)/pqremoteserver.o: $(OBJDIR)/pqremoteserver.cc $(OBJDIR)/pqremoteserver.hh
$(OBJDIR)/pqserverloop.o: $(OBJDIR)/mpfd.hh

COMMON_OBJS = \
	$(OBJDIR)/str.o \
	$(OBJDIR)/straccum.o \
	$(OBJDIR)/string.o \
	$(OBJDIR)/error.o \
	$(OBJDIR)/json.o \
	$(OBJDIR)/msgpack.o \
	$(OBJDIR)/compiler.o \
	$(OBJDIR)/encoding.o \
	$(OBJDIR)/hashallocator.o \
	$(OBJDIR)/sp_key.o \
	$(OBJDIR)/clp.o

PQSERVER_OBJS = $(COMMON_OBJS) \
	$(OBJDIR)/pqbase.o \
	$(OBJDIR)/pqjoin.o \
	$(OBJDIR)/pqsource.o \
	$(OBJDIR)/pqserver.o \
	$(OBJDIR)/pqtwitter.o \
	$(OBJDIR)/pqanalytics.o \
	$(OBJDIR)/pqfacebook.o \
	$(OBJDIR)/pqserverloop.o \
	$(OBJDIR)/pqunit.o \
	$(OBJDIR)/mpfd.o \
	$(OBJDIR)/pqremoteclient.o

$(OBJDIR)/pqserver: $(PQSERVER_OBJS) $(LIBTAMER)
	$(CXXLINK) -o $@ $(PQSERVER_OBJS) $(LDFLAGS) $(LIBTAMER) $(LIBS)

$(OBJDIR)/rbtest: $(OBJDIR)/rb.o
	$(CXXLINK) -o $@ $^ $(LDFLAGS) $(LIBS)

$(OBJDIR)/jsontest: $(COMMON_OBJS) $(OBJDIR)/jsontest.o
	$(CXXLINK) -o $@ $^ $(LDFLAGS) $(LIBS)

$(OBJDIR)/msgpacktest: $(COMMON_OBJS) $(OBJDIR)/msgpacktest.o
	$(CXXLINK) -o $@ $^ $(LDFLAGS) $(LIBS)

# create files needed by exp/ directory
$(OBJDIR)/gstore_server: $(PROTOGENDIR)/gstore.pb.h

$(OBJDIR)/wikibot: $(COMMON_OBJS) $(OBJDIR)/wikibot.o
	$(CXXLINK) -o $@ $^ $(LDFLAGS) $(LIBS)

$(OBJDIR)/unit: $(COMMON_OBJS) $(OBJDIR)/unit.o
	$(CXXLINK) -o $@ $^ $(LDFLAGS) $(LIBS)

$(OBJDIR)/bench: $(COMMON_OBJS) $(OBJDIR)/bench.o
	$(CXXLINK) -o $@ $^ $(LDFLAGS) $(LIBS)

$(OBJDIR)/warehouse: $(COMMON_OBJS) $(OBJDIR)/warehouse.o
	$(CXXLINK) -o $@ $^ $(LDFLAGS) $(LIBS)

$(OBJDIR)/facebook: $(COMMON_OBJS) $(OBJDIR)/facebook.o
	$(CXXLINK) -o $@ $^ $(LDFLAGS) $(LIBS)

$(OBJDIR)/twitter: $(COMMON_OBJS) $(OBJDIR)/twitterapp.o $(OBJDIR)/twitter.o
	$(CXXLINK) -o $@ $^ $(LDFLAGS) $(LIBS)

$(OBJDIR)/closetwitter: $(COMMON_OBJS) $(OBJDIR)/twitterapp.o $(OBJDIR)/closetwitter.o
	$(CXXLINK) -o $@ $^ $(LDFLAGS) $(LIBS)

$(OBJDIR)/hackernews: $(COMMON_OBJS) $(OBJDIR)/hackernews.o
	$(CXXLINK) -o $@ $^ $(LDFLAGS) $(LIBS)

$(OBJDIR)/hackernews2: $(COMMON_OBJS) $(OBJDIR)/hackernews2.o
	$(CXXLINK) -o $@ $^ $(LDFLAGS) $(LIBS)

$(OBJDIR)/simplerhn: $(COMMON_OBJS) $(OBJDIR)/simplerhn.o
	$(CXXLINK) -o $@ $^ $(LDFLAGS) $(LIBS)

$(OBJDIR)/rtm1: $(COMMON_OBJS) $(OBJDIR)/rtm1.o
	$(CXXLINK) -o $@ $^ $(LDFLAGS) $(LIBS)

$(OBJDIR)/rtm2: $(COMMON_OBJS) $(OBJDIR)/rtm2.o
	$(CXXLINK) -o $@ $^ $(LDFLAGS) $(LIBS)

$(OBJDIR)/rtm3: $(COMMON_OBJS) $(OBJDIR)/rtm3.o
	$(CXXLINK) -o $@ $^ $(LDFLAGS) $(LIBS)

$(OBJDIR)/ydmao: $(COMMON_OBJS) $(OBJDIR)/ydmao.o
	$(CXXLINK) -o $@ $^ $(LDFLAGS) $(LIBS)

$(OBJDIR)/neha: $(COMMON_OBJS) $(OBJDIR)/neha.o
	$(CXXLINK) -o $@ $^ $(LDFLAGS) $(LIBS)

$(OBJDIR)/scanperf: $(COMMON_OBJS) $(OBJDIR)/scanperf.o
	$(CXXLINK) -o $@ $^ $(LDFLAGS) $(LIBS)

$(OBJDIR)/benchproto: $(COMMON_OBJS) $(OBJDIR)/benchproto.o $(OBJDIR)/micro1.pb.o $(OBJDIR)/micro2.px.o
	$(CXXLINK) -o $@ $^ $(LDFLAGS) $(LIBS)
$(OBJDIR)/benchproto.o: $(PROTOGENDIR)/micro1.pb.h $(PROTOGENDIR)/micro2.px.hh

tamer/compiler/tamer $(LIBTAMER): tamer-update tamer/config.status
	cd tamer && $(MAKE) compiler tamer

tamer-update:
	@cd ./`git rev-parse --show-cdup` && cur=`git submodule status tamer | head -c 41 | tail -c +2` && if test "$$cur" != $(TAMER_COMMIT) && test -z `cd tamer; git rev-list -n1 $(TAMER_COMMIT)..HEAD`; then (cd tamer; git checkout -f master >/dev/null; git pull; cd ..; git submodule update tamer); fi

$(OBJDIR)/stamp $(DEPSDIR)/stamp:
	mkdir -p $(dir $@)
	touch $@

config.h: stamp-h

GNUmakefile: GNUmakefile.in config.status
	CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

$(top_srcdir)/configure $(top_srcdir)/config.h.in: $(top_srcdir)/configure.ac
	cd $(top_srcdir) && autoreconf -i && touch config.h.in

config.status: $(top_srcdir)/configure
	$(top_srcdir)/configure @ac_configure_args@

stamp-h: $(top_srcdir)/config.h.in config.status
	CONFIG_FILES= $(SHELL) ./config.status
	echo > stamp-h

clean:
	rm -rf $(OBJDIR) $(DEPSDIR) $(GENDIR)

distclean: clean
	rm -rf config.* configure autom4te.* stamp-h

DEPFILES := $(wildcard $(DEPSDIR)/*.d)
ifneq ($(DEPFILES),)
include $(DEPFILES)
endif

always:
	@:

.PHONY: all clean distclean always tamer-update
.PRECIOUS: $(PROTOGENDIR)/%.pb.cc $(PROTOGENDIR)/%.pb.h \
	$(PROTOGENDIR)/%.px.cc $(PROTOGENDIR)/%.px.hh \
	$(OBJ)/%.cc $(OBJ)/%.hh
