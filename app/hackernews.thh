#ifndef PQHACKERNEWS_HH
#define PQHACKERNEWS_HH
#include <boost/random.hpp>
#include <utility>
#include <vector>
#include <map>
#include <set>
#include <iostream>
#include <stdint.h>
#include <sys/resource.h>
#include <tamer/tamer.hh>
#include "json.hh"
#include "json.hh"
#include "time.hh"
#include "sp_key.hh"
#include "hackernewspopulator.hh"
#include "hackernewsshim.hh"
#include "pqlog.hh"
#include "pqmemory.hh"

namespace pq {
using tamer::event;
using tamer::preevent;
using tamer::gather_rendezvous;
class Hosts;
class Partitioner;

template <typename S>
class HackernewsRunner {
  public:
    HackernewsRunner(S& server, HackernewsPopulator& hp);
    tamed void populate(event<> e);
    tamed void run(event<> e);

  private:
    tamed void post_article(uint32_t author, uint32_t aid, event<> e);
    tamed void post_comment(uint32_t commentor, uint32_t aid, event<> e);
    tamed void vote(uint32_t voter, uint32_t aid, event<> e);
    tamed void read_article(uint32_t aid, event<> e);

    tamed void periodic_logger(event<> e);
    tamed void drain(gather_rendezvous& r, event<> e);

    S& server_;
    HackernewsPopulator& hp_;
    Log log_;
};

template <typename S>
inline HackernewsRunner<S>::HackernewsRunner(S& server, HackernewsPopulator& hp)
    : server_(server), hp_(hp), log_(tstamp()) {
}

tamed template <typename S>
void HackernewsRunner<S>::post_article(uint32_t author, uint32_t aid, event<> e) {
    hp_.post_article(author, aid);
    twait { server_.post_article(author, aid, Str("lalalalaxx", 10), hp_.karmas(), e); }
}

tamed template <typename S>
void HackernewsRunner<S>::post_comment(uint32_t commentor, uint32_t aid, event<> e) {
    twait { server_.post_comment(commentor, hp_.articles()[aid], aid, hp_.next_comment(),
                                 Str("calalalaxx", 10), e); }
}

tamed template <typename S>
void HackernewsRunner<S>::vote(uint32_t voter, uint32_t aid, event<> e) {
    twait { server_.vote(voter, hp_.articles()[aid], aid, hp_.karmas(), e); }
}

tamed template <typename S>
    void HackernewsRunner<S>::read_article(uint32_t aid, event<> e) {
    mandatory_assert(aid < hp_.narticles());
    twait { server_.read_article(aid, hp_.articles()[aid], hp_.karmas(), !hp_.run_only(), e); }
}

tamed template <typename S>
void HackernewsRunner<S>::periodic_logger(event<> e) {
    tvars {
        struct rusage u, lu;
        uint64_t now, before, utime, stime;
        double scale = 1.0 / 10000;
    }
    before = 0;
    memset(&lu, 0, sizeof(struct rusage));

    while(e) {
        mandatory_assert(getrusage(RUSAGE_SELF, &u) == 0, "Failed to getrusage.");
        now = tstamp();
        utime = tv2us(u.ru_utime) - tv2us(lu.ru_utime);
        stime = tv2us(u.ru_stime) - tv2us(lu.ru_stime);

        log_.record_at("mem_max_rss_mb", now, maxrss_mb(u.ru_maxrss));
        log_.record_at("utime_us", now, utime);
        log_.record_at("stime_us", now, stime);
        log_.record_at("cpu_pct", now, (before) ? ((utime + stime) * scale / fromus(now - before)) : 0);

        lu = u;
        before = now;
        twait volatile { tamer::at_delay_sec(1, make_event()); }
    }
}

tamed template <typename S>
void HackernewsRunner<S>::drain(gather_rendezvous& r, event<> e) {
    // we are waiting for the "top level" events gathered in the
    // rendezvous r to be triggered. however, some shim layers may buffer
    // I/O, causing the program to hang if not flushed. it is possible
    // for some lower level events that are triggered by the flushing
    // to generate more I/O, hence the need for the loop.
    while(r.has_waiting()) {
        twait { server_.flush(make_event()); }
        twait { tamer::at_delay_msec(10, make_event()); }
    }
    e();
}

tamed template <typename S>
void HackernewsRunner<S>::populate(event<> e) {
    tvars {
        boost::mt19937 gen;
        boost::random_number_generator<boost::mt19937> rng(gen);
        uint32_t nv = 0, nc = 0, j = 0, i = 0;
        uint32_t author, ncomment, nvote, voter, aid, commentor;
        tamer::gather_rendezvous gr;
    }
    twait { server_.initialize(hp_.log(), hp_.mk(), hp_.ma(), hp_.push(), tamer::event<>()); }

    if (hp_.run_only()) {
        std::cerr << "Not populating datastore\n";
        hp_.set_defaults();
    } else {
        // Populate datastore
        if (hp_.pg()) {
            hp_.fill_db();
            if (!hp_.populate_only())
                hp_.populate_from_files(&nv, &nc);
        } else {
            gen.seed(13918);
            for (aid = 0; aid < hp_.pre(); aid++) {
                // Need this to be deterministic.  Fake it for now.
                // author = rng(hp_.nusers());
                author = aid % hp_.nusers();
                post_article(author, aid, gr.make_event());
                ncomment = rng(20);
                for (j = 1; j <= ncomment; ++j) {
                    nc++;
                    commentor = rng(hp_.nusers());
                    post_comment(commentor, aid, gr.make_event());
                }
                nvote = rng(50);
                for (j = 0; j < nvote; ++j) {
                    voter = rng(hp_.nusers());
                    if (hp_.vote(aid, voter)) {
                        ++nv;
                        vote(voter, aid, gr.make_event());
                    }
                }
                twait { server_.pace(make_event()); }
            }
            twait { drain(gr, make_event()); }
        }
    }

    if (hp_.log() && !hp_.run_only()) {
        std::cout << ": my karma table:\n";
        for (i = 0; i < hp_.nusers(); i++)
            std::cout << " k " << i << ": " << hp_.karma(i) << "\n";
        std::cout << ": end my karma table\n";
    }

    twait { server_.post_populate(make_event()); }
    std::cerr << "Running with " << hp_.nusers() << " users, " << hp_.narticles() 
              << " articles, " << hp_.nvotes << " votes, " << hp_.ncomments << " comments." << std::endl;
    e();
}

tamed template <typename S>
void HackernewsRunner<S>::run(event<> e) {
    tvars {
        boost::mt19937 gen;
        boost::random_number_generator<boost::mt19937> rng(gen);
        const uint32_t nops = this->hp_.nops();
        const uint32_t nusers = this->hp_.nusers();
        struct rusage ru[2];
        struct timeval tv[2];
        uint32_t nread = 0, npost = 0, ncomment = 0, nvote = 0;
        Json old_stats, stats, logs, j;
        double real_time;
        uint32_t i, p, user, aid;
        tamer::gather_rendezvous gr;
    }
    gen.seed(13918);
    periodic_logger(e);

    log_.clear();
    twait { server_.control(Json().set("clear_log", true), make_event(j)); }
    server_.stats(gr.make_event(old_stats));
    twait { drain(gr, make_event()); }

    getrusage(RUSAGE_SELF, &ru[0]);
    gettimeofday(&tv[0], NULL);

    if (hp_.populate_only()) {
        std::cerr << "Not running experiment\n";
    } else {
        for (i = 0; i < nops; ++i) {
            p = rng(100);
            user = rng(nusers);
            if (p < hp_.post_rate()) {
                post_article(user, hp_.next_aid(), gr.make_event());
                npost++;
            } else {
                aid = rng(hp_.narticles());
                read_article(aid, gr.make_event());
                nread++;
                if (p < hp_.vote_rate() && hp_.vote(aid, user)) {
                    vote(user, aid, gr.make_event());
                    ++nvote;
                }
                if (p < hp_.comment_rate()) {
                    post_comment(user, aid, gr.make_event());
                    ncomment++;
                }
            }
            twait { server_.pace(make_event()); }
        }
    }
    twait { drain(gr, make_event()); }

    getrusage(RUSAGE_SELF, &ru[1]);
    gettimeofday(&tv[1], NULL);

    server_.stats(gr.make_event(stats));
    twait { drain(gr, make_event()); }
    twait { server_.control(Json().set("get_log", true), make_event(logs)); }

    if (!stats.is_array()) {
        old_stats = Json::make_array(old_stats);
        stats = Json::make_array(stats);
    }

    uint32_t s = 0;
    for (auto it = stats.abegin(); it != stats.aend(); ++it, ++s) {
        (*it)["server_user_time"] -= old_stats[s]["server_user_time"];
        (*it)["server_system_time"] -= old_stats[s]["server_system_time"];
        (*it)["server_wall_time"] -= old_stats[s]["server_wall_time"];
        (*it)["server_wall_time_insert"] -= old_stats[s]["server_wall_time_insert"];
        (*it)["server_wall_time_validate"] -= old_stats[s]["server_wall_time_validate"];
        (*it)["server_wall_time_evict"] -= old_stats[s]["server_wall_time_evict"];
        (*it)["server_wall_time_other"] -= old_stats[s]["server_wall_time_other"];
    }

    stats = Json().set("log", log_.as_json())
                  .set("server_logs", logs)
                  .set("server_stats", stats);

    real_time = to_real(tv[1] - tv[0]);
    stats.set("nread", nread).set("npost", npost)
	.set("ncomment", ncomment).set("nvote", nvote)
	.set("user_time", to_real(ru[1].ru_utime - ru[0].ru_utime))
	.set("system_time", to_real(ru[1].ru_stime - ru[0].ru_stime))
	.set("real_time", real_time);

    std::cout << stats.unparse(Json::indent_depth(4)) << "\n";
    std::cerr << nops << " done, " << real_time << " seconds, " 
              << nops / real_time << " qps\n";
    e();
}

tamed void run_hn_remote(HackernewsPopulator& hp, int client_port,
                         const Hosts* hosts, const Hosts* dbhosts,
                         const Partitioner* part);

class DBPoolParams;
tamed void run_hn_remote_db(HackernewsPopulator& hp, const DBPoolParams& dbparams);

tamed void run_hn_remote_redis(HackernewsPopulator& hp);

};

#endif
