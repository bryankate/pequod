// -*- mode: c++ -*-
#ifndef PQTWITTER_SHIM_HH
#define PQTWITTER_SHIM_HH

#include "str.hh"
#include "string.hh"
#include "check.hh"
#include "pqclient.hh"
#include <unordered_set>
#include <tamer/tamer.hh>

namespace pq {

template <typename S>
class TwitterShim {
  public:
    TwitterShim(S& server, bool writearound);

    tamed inline void get_follower(uint32_t poster, tamer::event<std::vector<uint32_t> > e);
    template <typename R>
    inline void add_follower(uint32_t subscriber, uint32_t poster, tamer::preevent<R> e);

    template <typename R>
    inline void subscribe(uint32_t subscriber, uint32_t poster, tamer::preevent<R> e);
    template <typename R>
    inline void mark_celebrity(uint32_t poster, tamer::preevent<R> e);
    template <typename R>
    inline void post(uint32_t poster, uint32_t time, const String& value, tamer::preevent<R> e);

    tamed void initialize(bool client_push, bool server_pull, uint32_t celebrity,
                          int celebrity_type, uint32_t nusers, bool pure_server_pull,
                          tamer::event<> done);

    inline void prepare_push_post(uint32_t poster, uint32_t time, const String& value);
    template <typename R>
    inline void push_post(uint32_t subscriber, tamer::preevent<R> e);
    typedef typename S::scan_result scan_result;
    tamed inline void timeline_scan_add_count(uint32_t subscriber, uint32_t start_time, uint32_t now, tamer::event<size_t> e);
    template <typename R>
    inline void timeline_scan(uint32_t subscriber, uint32_t start_time, uint32_t now, tamer::preevent<R, scan_result> e);
    template <typename R>
    inline void timeline_add_count(uint32_t subscriber, uint32_t start_time, uint32_t now, tamer::preevent<R, size_t> e);
    template <typename R>
    inline void timeline_set_initial_count(uint32_t subscriber, uint32_t start_time, uint32_t now, tamer::preevent<R, size_t> e);
    template <typename R>
    inline void pace(tamer::preevent<R> e);
    template <typename R>
    inline void stats(tamer::preevent<R, Json> e);
    template <typename R>
    inline void control(const Json& cmd, tamer::preevent<R, Json> e);

  private:
    S& server_;
    bool writearound_;
    char buf_[key_capacity];
    String value_;
    std::vector<bool> celeb_;
};


template <typename S>
class TwitterHashShim {
  public:
    TwitterHashShim(S& server);

    tamed void get_follower(uint32_t poster, tamer::event<std::vector<uint32_t> > e);
    inline void add_follower(uint32_t subscriber, uint32_t poster, tamer::event<> e);

    inline void subscribe(uint32_t subscriber, uint32_t poster, tamer::event<> e);
    template <typename R>
    inline void mark_celebrity(uint32_t poster, tamer::preevent<R> e);
    inline void post(uint32_t poster, uint32_t time, Str value, tamer::event<> e);
    inline void initialize(bool client_push, bool server_pull, uint32_t celebrity,
                           int celebrity_type, uint32_t, bool pure_server_pull, tamer::event<> e);
    inline void prepare_push_post(uint32_t poster, uint32_t time, Str value);
    inline void push_post(uint32_t subscriber, tamer::event<> e);
    typedef DirectClient::scan_result scan_result;
    template <typename R>
    inline void timeline_scan(uint32_t subscriber, uint32_t start_time, uint32_t now, tamer::preevent<R, scan_result> e);
    tamed void timeline_add_count(uint32_t subscriber, uint32_t start_time, uint32_t now, tamer::event<size_t> e);
    void timeline_scan_add_count(uint32_t subscriber, uint32_t start_time, uint32_t now, tamer::event<size_t> e);
    void timeline_set_initial_count(uint32_t subscriber, uint32_t start_time, uint32_t now, tamer::event<size_t> e);

    template <typename R>
    inline void pace(tamer::preevent<R> e);
    template <typename R>
    inline void stats(tamer::preevent<R, Json> e);
    template <typename R>
    inline void control(const Json& cmd, tamer::preevent<R, Json> e);

  private:
    S& server_;
    char buf_[128];
    int buflen_;
    struct tlstatus {
        uint32_t time;
        size_t pos;
        tlstatus() : time(0), pos(0) {}
    };
    std::vector<tlstatus> last_refresh_;
};


template <typename S>
TwitterShim<S>::TwitterShim(S& server, bool writearound)
    : server_(server), writearound_(writearound) {
}

tamed template <typename S>
inline void TwitterShim<S>::get_follower(uint32_t poster, tamer::event<std::vector<uint32_t> > e) {
    tvars { typename S::scan_result scan_result; }
    twait {
        sprintf(buf_, "f|%05u| f|%05u}", poster, poster);
        server_.scan(Str(buf_, 8), Str(buf_ + 9, 8), make_event(scan_result));
    }
    for (auto it = scan_result.begin(); it != scan_result.end(); ++it) {
        Str key = it->key();
        e.result_pointer()->push_back(String(key.data() + 8, key.data() + 13).to_i());
    }
    e.unblock();
}

template <typename S> template <typename R>
inline void TwitterShim<S>::add_follower(uint32_t subscriber, uint32_t poster, tamer::preevent<R> done) {
    sprintf(buf_, "f|%05u|%05u", poster, subscriber);
    if (writearound_)
        server_.insert_db(Str(buf_, 13), Str("1", 1), done);
    else
        server_.insert(Str(buf_, 13), Str("1", 1), done);
}

tamed template <typename S>
void TwitterShim<S>::initialize(bool client_push, bool server_pull, uint32_t celebrity,
                                int celebrity_type, uint32_t nusers, bool pure_server_pull,
                                tamer::event<> done) {
    tvars { Json j[4]; }
    twait {
        if (client_push) {
            // The purpose of this join is to install triecuts for fairness
            server_.add_join("xxx|", "xxx}",
                             "xxx|<user>|<time>|<poster> = "
                             "copy p|<poster>|<time> "
                             "using s|<user>|<poster>, "
                             "t|<user>|<time>|<poster> pull "
                             "where user:5t, time:10, poster:5t",
                             make_event(j[0]));
        } else {
            server_.add_join("t|", "t}",
                             "t|<user>|<time>|<poster> = "
                             "copy p|<poster>|<time> "
                             "using s|<user>|<poster> "
                             + String(server_pull ? "pull " : "") +
                             "where user:5t, time:10, poster:5t",
                             make_event(j[0]));
            if (celebrity && celebrity_type == 4) {
                celeb_.assign(nusers, false);
                server_.add_join("ct|", "ct}",
                                 "ct|<time>|<poster> = copy cp|<poster>|<time> "
                                 "where poster:5, time:10",
                                 make_event(j[3]));
                server_.add_join("t|", "t}",
                                 "t|<user>|<time>|<poster> = "
                                 "pull copy ct|<time>|<poster> "
                                 "using filter s|<user>|<poster> "
                                 "where user:5, time:10, poster:5",
                                 make_event(j[1]));
            } else if (celebrity && celebrity_type == 3) {
                celeb_.assign(nusers, false);
                server_.add_join("ct|", "ct}",
                                 "ct|<time>|<poster> = copy cp|<poster>|<time> "
                                 "where poster:5, time:10",
                                 make_event(j[3]));
                server_.add_join("cs|", "cs}",
                                 "cs|<user>|<poster> = "
                                 "copy c|<poster> "
                                 "using s|<user>|<poster> "
                                 "where user:5t, poster:5",
                                 make_event(j[2]));
                server_.add_join("t|", "t}",
                                 "t|<user>|<time>|<poster> = "
                                 "pull copy ct|<time>|<poster> "
                                 "using filter cs|<user>|<poster> "
                                 "where user:5, time:10, poster:5",
                                 make_event(j[1]));
            } else if (celebrity && celebrity_type == 2) {
                celeb_.assign(nusers, false);
                server_.add_join("cs|", "cs}",
                                 "cs|<user>|<poster> = "
                                 "copy c|<poster> "
                                 "using s|<user>|<poster> "
                                 "where user:5t, poster:5",
                                 make_event(j[2]));
                server_.add_join("t|", "t}",
                                 "t|<user>|<time>|<poster> = "
                                 "pull copy cp|<poster>|<time> "
                                 "using cs|<user>|<poster> "
                                 "where user:5, time:10, poster:5",
                                 make_event(j[1]));
            } else if (celebrity) {
                celeb_.assign(nusers, false);
                server_.add_join("t|", "t}",
                                 "t|<user>|<time>|<poster> = "
                                 "pull copy cp|<poster>|<time> "
                                 "using s|<user>|<poster> "
                                 "and c|<poster> "
                                 "where user:5, time:10, poster:5",
                                 make_event(j[1]));
            }
        }
    }
    for (int i = 0; i < 4; ++i)
        if (j[i] && !j[i]["ok"])
            std::cerr << "join error: " << j[i] << "\n";
    done();
}

template <typename S> template <typename R>
inline void TwitterShim<S>::subscribe(uint32_t subscriber, uint32_t poster, tamer::preevent<R> done) {
    sprintf(buf_, "s|%05u|%05u", subscriber, poster);
    if (writearound_)
        server_.insert_db(Str(buf_, 13), Str("1", 1), done);
    else
        server_.insert(Str(buf_, 13), Str("1", 1), done);
}

template <typename S> template <typename R>
inline void TwitterShim<S>::mark_celebrity(uint32_t poster, tamer::preevent<R> done) {
    celeb_[poster] = true;
    sprintf(buf_, "c|%05u", poster);
    if (writearound_)
        server_.insert_db(Str(buf_, 7), Str("1", 1), done);
    else
        server_.insert(Str(buf_, 7), Str("1", 1), done);
}

template <typename S> template <typename R>
inline void TwitterShim<S>::post(uint32_t poster, uint32_t time, const String& value, tamer::preevent<R> done) {
    bool nonceleb = celeb_.empty() || !celeb_[poster];
    sprintf(buf_, "cp|%05u|%010u", poster, time);
    if (writearound_)
        server_.insert_db(Str(&buf_[nonceleb], 19 - nonceleb), value, done);
    else
        server_.insert(Str(&buf_[nonceleb], 19 - nonceleb), value, done);
}

template <typename S>
inline void TwitterShim<S>::prepare_push_post(uint32_t poster, uint32_t time,
                                              const String& value) {
    sprintf(buf_, "t|%05u|%010u|%05u", 0, time, poster);
    value_ = value;
}

template <typename S> template <typename R>
inline void TwitterShim<S>::push_post(uint32_t subscriber, tamer::preevent<R> done) {
    sprintf(buf_ + 2, "%05u", subscriber);
    buf_[7] = '|'; // replace terminating null
    server_.insert(Str(buf_, 24), value_, done);
}

tamed template <typename S>
void TwitterShim<S>::timeline_scan_add_count(uint32_t subscriber, uint32_t start_time,
                                             uint32_t now, tamer::event<size_t> e) {
    tvars {
        typename S::scan_result sr;
    }
    sprintf(buf_, "t|%05u|%010u t|%05u}", subscriber, start_time, subscriber);
    twait {
        server_.scan(Str(buf_, 18), Str(buf_ + 19, 8), make_event(sr));
    }
    e(e.result() + sr.size());
}

template <typename S> template <typename R>
inline void TwitterShim<S>::timeline_scan(uint32_t subscriber, uint32_t start_time, uint32_t, tamer::preevent<R, scan_result> done) {
    sprintf(buf_, "t|%05u|%010u t|%05u}", subscriber, start_time, subscriber);
    server_.scan(Str(buf_, 18), Str(buf_ + 19, 8), done);
}

template <typename S> template <typename R>
inline void TwitterShim<S>::timeline_add_count(uint32_t subscriber, uint32_t start_time, uint32_t, tamer::preevent<R, size_t> done) {
    sprintf(buf_, "t|%05u|%010u t|%05u}", subscriber, start_time, subscriber);
    server_.add_count(Str(buf_, 18), Str(buf_ + 19, 8), done);
}

template <typename S> template <typename R>
inline void TwitterShim<S>::timeline_set_initial_count(uint32_t subscriber, uint32_t start_time, uint32_t, tamer::preevent<R, size_t> done) {
    sprintf(buf_, "t|%05u|%010u t|%05u}", subscriber, start_time, subscriber);
    server_.add_count(Str(buf_, 18), Str(buf_ + 19, 8), done);
}

template <typename S> template <typename R>
inline void TwitterShim<S>::pace(tamer::preevent<R> done) {
    server_.pace(done);
}

template <typename S> template <typename R>
inline void TwitterShim<S>::stats(tamer::preevent<R, Json> done) {
    server_.stats(done);
}

template <typename S> template <typename R>
inline void TwitterShim<S>::control(const Json& cmd, tamer::preevent<R, Json> done) {
    server_.control(cmd, done);
}


template <typename S>
TwitterHashShim<S>::TwitterHashShim(S& server)
    : server_(server) {
}

tamed template <typename S>
inline void TwitterHashShim<S>::get_follower(uint32_t poster, tamer::event<std::vector<uint32_t> > e) {
    tvars {
        String v;
        std::unordered_set<uint32_t> follower;
    }
    sprintf(buf_, "f|%05u", poster);
    twait {
        server_.get(Str(buf_, 7), 0, make_event(v));
    }
    CHECK_EQ(v.length() % 5, 0);
    for (int i = 0; i < v.length(); i+=5)
        follower.insert(String(v.data() + i, v.data() + i + 5).to_i());
    for (auto& f: follower)
        e.result_pointer()->push_back(f);
    server_.done_get(v);
    e.unblock();
}

template <typename S>
inline void TwitterHashShim<S>::add_follower(uint32_t subscriber, uint32_t poster, tamer::event<> done) {
    sprintf(buf_, "f|%05u %05u", poster, subscriber);
    server_.append(Str(buf_, 7), Str(buf_ + 8, 5), done);
}

template <typename S>
inline void TwitterHashShim<S>::initialize(bool client_push, bool server_pull, uint32_t celebrity,
                                           int celebrity_type, uint32_t, bool pure_server_pull, tamer::event<> done) {
    mandatory_assert(client_push && !server_pull && !celebrity && !celebrity_type && !pure_server_pull);
    done();
}

template <typename S>
inline void TwitterHashShim<S>::subscribe(uint32_t subscriber, uint32_t poster, tamer::event<> done) {
    sprintf(buf_, "s|%05u %05u", subscriber, poster);
    server_.append(Str(buf_, 7), Str(buf_ + 8, 5), done);
}

template <typename S> template <typename R>
inline void TwitterHashShim<S>::mark_celebrity(uint32_t poster, tamer::preevent<R> done) {
    (void) poster;
    done();
}

template <typename S>
inline void TwitterHashShim<S>::post(uint32_t poster, uint32_t time, Str value, tamer::event<> done) {
    sprintf(buf_, "p|%05u|%010u", poster, time);
    server_.set(Str(buf_, 18), value, done);
}

template <typename S>
inline void TwitterHashShim<S>::prepare_push_post(uint32_t poster, uint32_t time, Str value) {
    sprintf(buf_, "t|%05u %05u|%010u\254", 0, poster, time);
    assert(sizeof(buf_) >= size_t(value.length()) + 26);
    memcpy(buf_ + 25, value.data(), value.length());
    buflen_ = 25 + value.length();
}

template <typename S>
inline void TwitterHashShim<S>::push_post(uint32_t subscriber, tamer::event<> done) {
    sprintf(buf_ + 2, "%05u", subscriber);
    server_.append(Str(buf_, 7), Str(buf_ + 8, buflen_ - 8), done);
}

template <typename S>
inline void TwitterHashShim<S>::timeline_scan_add_count(uint32_t subscriber, uint32_t start_time, uint32_t now, tamer::event<size_t> done) {
    timeline_add_count(subscriber, start_time, now, done);
}

template <typename S> template <typename R>
inline void TwitterHashShim<S>::timeline_scan(uint32_t subscriber, uint32_t start_time, uint32_t, tamer::preevent<R, scan_result> done) {
    (void) subscriber, (void) start_time;
    assert(0);
    done.unblock();
}

tamed template <typename S>
inline void TwitterHashShim<S>::timeline_add_count(uint32_t subscriber, uint32_t start_time, uint32_t now, tamer::event<size_t> done) {
    tvars {
       String v;
       tlstatus* tls;
       size_t oldpos;
    }
    if (last_refresh_.size() <= subscriber)
        last_refresh_.resize(subscriber + 1);
    tls = &last_refresh_[subscriber];
    if (tls->time > start_time)
        tls->pos = 0;
    tls->time = now;
    sprintf(buf_, "t|%05u", subscriber);
    oldpos = tls->pos;
    twait { server_.get(Str(buf_, 7), int(oldpos), make_event(v)); }
    tls = &last_refresh_[subscriber];
    if (tls->pos == oldpos)
        tls->pos += v.length();
    size_t n = 0;
    for (int pos = 0; (pos = v.find_left('\254', pos)) != -1; ++pos) {
        const char *p;
        for (p = v.data() + pos; *p != '|'; --p);
        if (uint32_t(atoi(p + 1)) >= start_time)
            ++n;
    }
    done(done.result() + n);
    server_.done_get(v);
}

template <typename S>
void TwitterHashShim<S>::timeline_set_initial_count(uint32_t subscriber, uint32_t start_time, uint32_t now, tamer::event<size_t> done) {
    timeline_add_count(subscriber, start_time, now, done);
}

template <typename S> template <typename R>
inline void TwitterHashShim<S>::pace(tamer::preevent<R> done) {
    server_.pace(done);
}

template <typename S> template <typename R>
inline void TwitterHashShim<S>::stats(tamer::preevent<R, Json> done) {
    done(Json());
}

template <typename S> template <typename R>
inline void TwitterHashShim<S>::control(const Json& cmd, tamer::preevent<R, Json> done) {
    (void)cmd;
    done(Json());
}

}

#endif
