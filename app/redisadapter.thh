// -*- mode: c++ -*-
#ifndef REDIS_ADAPTER_HH
#define REDIS_ADAPTER_HH

#if HAVE_HIREDIS_HIREDIS_H
#include "json.hh"
#include "str.hh"
#include "string.hh"
#include "hosts.hh"
#include "partitioner.hh"
#include <vector>
#include <tamer/tamer.hh>
#include "hiredis/hiredis.h"
#include "hiredis/async.h"

namespace pq {

class RedisClient {
  public:
    typedef std::vector<String> result_set;

    RedisClient();
    RedisClient(String host, uint32_t port);
    ~RedisClient();

    void connect();
    void clear();

    void get(Str k, tamer::event<String> e);
    void get(Str k, int32_t begin, tamer::event<String> e);
    void getrange(Str k, int32_t begin, int32_t end, tamer::event<String> e);
    void set(Str k, Str v, tamer::event<> e);
    void append(Str k, Str v, tamer::event<> e);
    void increment(Str k, tamer::event<> e);
    void length(Str k, tamer::event<int32_t> e);
    void sadd(Str k, Str v, tamer::event<> e);
    void smembers(Str k, tamer::event<result_set> e);
    void zadd(Str k, Str v, int32_t score, tamer::event<> e);
    void zrangebyscore(Str k, int32_t begin, int32_t end, tamer::event<result_set> e);

    // only here for interface compliance
    void done_get(Str k);
    void pace(tamer::event<> e);

  private:
    redisAsyncContext* ctx_;
    String host_;
    uint32_t port_;
};

void redis_cb_void(redisAsyncContext* c, void* reply, void* privdata);
void redis_cb_string(redisAsyncContext* c, void* reply, void* privdata);
void redis_cb_int32(redisAsyncContext* c, void* reply, void* privdata);
void redis_cb_set(redisAsyncContext* c, void* reply, void* privdata);


class RedisMultiClient {
  public:
    typedef RedisClient::result_set result_set;

    RedisMultiClient(const Hosts* hosts, const Partitioner* part);
    ~RedisMultiClient();

    void connect();
    void clear();

    inline void get(Str k, tamer::event<String> e);
    inline void get(Str k, int32_t begin, tamer::event<String> e);
    inline void getrange(Str k, int32_t begin, int32_t end, tamer::event<String> e);
    inline void set(Str k, Str v, tamer::event<> e);
    inline void append(Str k, Str v, tamer::event<> e);
    inline void increment(Str k, tamer::event<> e);
    inline void length(Str k, tamer::event<int32_t> e);
    inline void sadd(Str k, Str v, tamer::event<> e);
    inline void smembers(Str k, tamer::event<result_set> e);
    inline void zadd(Str k, Str v, int32_t score, tamer::event<> e);
    inline void zrangebyscore(Str k, int32_t begin, int32_t end, tamer::event<result_set> e);

  private:
    const Hosts* hosts_;
    const Partitioner* part_;
    std::vector<RedisClient*> clients_;

    inline RedisClient* cache_for(Str k);
};

inline void RedisMultiClient::get(Str k, tamer::event<String> e) {
    cache_for(k)->get(k, e);
}

inline void RedisMultiClient::get(Str k, int32_t begin, tamer::event<String> e) {
    cache_for(k)->get(k, begin, e);
}

inline void RedisMultiClient::getrange(Str k, int32_t begin, int32_t end, tamer::event<String> e) {
    cache_for(k)->getrange(k, begin, end, e);
}

inline void RedisMultiClient::set(Str k, Str v, tamer::event<> e) {
    cache_for(k)->set(k, v, e);
}

inline void RedisMultiClient::append(Str k, Str v, tamer::event<> e) {
    cache_for(k)->append(k, v, e);
}

inline void RedisMultiClient::increment(Str k, tamer::event<> e) {
    cache_for(k)->increment(k, e);
}

inline void RedisMultiClient::length(Str k, tamer::event<int32_t> e) {
    cache_for(k)->length(k, e);
}

inline void RedisMultiClient::sadd(Str k, Str v, tamer::event<> e) {
    cache_for(k)->sadd(k, v, e);
}

inline void RedisMultiClient::smembers(Str k, tamer::event<result_set> e) {
    cache_for(k)->smembers(k, e);
}

inline void RedisMultiClient::zadd(Str k, Str v, int32_t score, tamer::event<> e) {
    cache_for(k)->zadd(k, v, score, e);
}

inline void RedisMultiClient::zrangebyscore(Str k, int32_t begin, int32_t end,
                                            tamer::event<result_set> e) {
    cache_for(k)->zrangebyscore(k, begin, end, e);
}

inline RedisClient* RedisMultiClient::cache_for(Str key) {
    int32_t owner = part_->owner(key);
    assert(owner >= 0 && owner < (int32_t)clients_.size() && "Make sure the partition function is correct.");
    return clients_[owner];
}


struct RedisAdapterState {
    RedisAdapterState(redisAsyncContext *c);

    redisAsyncContext *context;
    volatile bool reading;
    volatile bool writing;
    tamer::event<int32_t> read_event;
    tamer::event<int32_t> write_event;
};

tamed void redis_tamer_add_read(void* privdata);
void redis_tamer_del_read(void* privdata);
tamed void redis_tamer_add_write(void* privdata);
void redis_tamer_del_write(void* privdata);
void redis_tamer_cleanup(void* privdata);
int32_t redis_tamer_attach(redisAsyncContext* ac);

}

#endif
#endif
