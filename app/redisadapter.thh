// -*- mode: c++ -*-
#ifndef REDIS_ADAPTER_HH
#define REDIS_ADAPTER_HH

#include "json.hh"
#include "str.hh"
#include "string.hh"
#include <tamer/tamer.hh>
#include <tamer/fd.hh>
#include <sys/uio.h>
#include <vector>
#include <deque>

namespace pq {

class RedisReplyParser {
  public:
    RedisReplyParser();
    int consume(const char* buf, size_t length);
    bool complete();
    void reset();
    bool has_value();
    String& value();
  private:
    enum { Type, ReadVStr, VStrLF, BVStr, BVStrCR, BVStrLF, Done};
    char type_;
    int state_;
    int bstr_len_;
    int bstr_pos_;
    String v_;
};

class RedisCommand {
  public:
    static String make_get(const String& k);
    static String make_getrange(const String& k, int begin, int end);
    static String make_set(const String& k, const String& v);
    static String make_append(const String& k, const String& v);
    static String make_incr(const String& k);
};

class RedisSyncClient {
  public:
    RedisSyncClient();
    void get(const String& k, String& v);
    void getrange(const String& k, int begin, int end, String& v);
    void set(const String& k, const String& v);
    void append(const String& k, const String& v, int& newlen);
    void incr(const String& k, int& newv);
  private:
    void read_reply(String& v);
    void read_till_cr(String& v);
    void readn(void* buf, size_t count);
    void skipcrlf();
    void writen(const void* buf, size_t count);
    int fd_;
};

class redis_fd {
  public:
    inline redis_fd(tamer::fd fd);
    ~redis_fd();

    inline void call(const Str j, tamer::event<String> reply);
    inline void pace(tamer::event<> done);

    inline Json status() const;

  private:
    void read(tamer::event<String> receiver);
    void write(const Str req);

    tamer::fd fd_;

    enum { wrcap = 1 << 17, wrlowat = 1 << 12, wrhiwat = wrcap - 2048 };
    struct wrelem {
        StringAccum sa;
        int pos;
    };
    std::deque<wrelem> wrelem_;
    size_t wrsize_;
    bool wrblocked_;
    tamer::event<> wrwake_;
    tamer::event<> wrkill_;

    enum { rdcap = 1 << 17 };
    String rdbuf_;
    size_t rdpos_;
    size_t rdlen_;
    bool rdblocked_;
    pq::RedisReplyParser rdparser_;

    std::deque<tamer::event<String> > rdwait_;
    tamer::event<> rdwake_;
    tamer::event<> rdkill_;

    enum { wrpacelim = 1 << 20, rdpacelim = 1 << 10 };
    enum { wrpacerecover = 1 << 19, rdpacerecover = 1 << 9 };
    tamer::event<> pacer_;

    void check() const;
    bool read_once(String* receiver);
    void write_once();
    inline bool need_pace() const;
    inline bool pace_recovered() const;
    tamed void writer_coroutine();
    tamed void reader_coroutine();
};

class RedisfdHashClient {
  public:
    RedisfdHashClient(tamer::fd fd) : fd_(fd) {}
    void get(Str k, tamer::event<String> e);
    void get(Str k, int begin, tamer::event<String> e) {
        getrange(k, begin, -1, e);
    }
    void getrange(Str k, int begin, int end, tamer::event<String> e);
    tamed void set(Str k, Str v, tamer::event<> e);
    tamed void append(Str k, Str v, tamer::event<> e);
    void done_get(String) {
    }
    tamed void increment(Str k, tamer::event<> e);
    void pace(tamer::event<> done);
  private:
    redis_fd fd_;
};


inline redis_fd::redis_fd(tamer::fd fd)
    : fd_(fd), wrsize_(0), wrblocked_(false),
      rdbuf_(String::make_uninitialized(rdcap)), rdpos_(0), rdlen_(0),
      rdblocked_(false) {
    wrelem_.push_back(wrelem());
    wrelem_.back().sa.reserve(wrcap);
    wrelem_.back().pos = 0;

    writer_coroutine();
    reader_coroutine();
}

inline void redis_fd::call(const Str req, tamer::event<String> done) {
    write(req);
    read(done);
}

inline bool redis_fd::need_pace() const {
    return wrsize_ > wrpacelim && rdwait_.size() > rdpacelim;
}

inline bool redis_fd::pace_recovered() const {
    return wrsize_ <= wrpacerecover && rdwait_.size() <= rdpacerecover;
}

inline void redis_fd::pace(tamer::event<> done) {
    if (need_pace())
        pacer_ = tamer::distribute(pacer_, std::move(done));
    else
        done();
}

inline Json redis_fd::status() const {
    //check();
    return Json().set("buffered_write_bytes", wrsize_)
        .set("buffered_read_bytes", rdlen_ - rdpos_)
        .set("waiting_readers", rdwait_.size());
}

}

tamed void test_redis_async();

#endif
