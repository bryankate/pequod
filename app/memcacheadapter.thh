// -*- mode: c++ -*-
#ifndef MEMCACHE_ADAPTER_HH
#define MEMCACHE_ADAPTER_HH

#include "str.hh"
#include "string.hh"
#include "json.hh"
#include "hosts.hh"
#include "partitioner.hh"
#include <tamer/tamer.hh>
#include <tamer/fd.hh>
#include <vector>
#include <deque>
#include <utility>

namespace pq {

enum { use_yandong_modified_server = 0 };

struct MemcacheResponse {
    uint32_t seq;
    uint16_t status;
    uint64_t intval;
    String strval;
    Json jsonval;
};


class MemcacheClient {
  public:
    MemcacheClient();
    MemcacheClient(String host, uint32_t port);
    ~MemcacheClient();

    tamed void connect(tamer::event<> done);
    void clear();

    tamed void get(Str key, tamer::event<String> e);
    tamed void get(Str key, int32_t offset, tamer::event<String> e);
    tamed void set(Str key, Str value, tamer::event<> e);
    tamed void append(Str key, Str value, tamer::event<> e);
    tamed void increment(Str key, tamer::event<> e);
    tamed void length(Str key, tamer::event<int32_t> e);
    tamed void stats(tamer::event<Json> e);
    tamed void pace(tamer::event<> e);

    // only here for interface compliance
    void done_get(Str key);

  private:
    enum { wbuffsz_lo = 2 << 19, wbuffsz_hi = 2 << 20 };
    enum { nout_lo = 2 << 15, nout_hi = 2 << 16 };

    String host_;
    uint32_t port_;
    tamer::fd sock_;
    uint32_t seq_;
    volatile bool reading_;
    std::deque<tamer::event<MemcacheResponse>> rdwait_;
    uint32_t wbuffsz_;
    tamer::event<> pacer_;

    tamed void check_pace(tamer::event<> e);

#if HAVE_MEMCACHED_PROTOCOL_BINARY_H
    uint32_t prep_command(uint8_t* data, uint8_t op, Str key, Str value, uint32_t seq);
    tamed void send_command(const uint8_t* data, uint32_t len, tamer::event<MemcacheResponse> e);
    tamed void read_loop();
#endif
};


class MemcacheMultiClient {
  public:
    MemcacheMultiClient(const Hosts* hosts, const Partitioner* part);
    ~MemcacheMultiClient();

    tamed void connect(tamer::event<> e);
    void clear();

    inline void get(Str k, tamer::event<String> e);
    inline void get(Str k, int32_t begin, tamer::event<String> e);
    inline void set(Str k, Str v, tamer::event<> e);
    inline void append(Str k, Str v, tamer::event<> e);
    inline void increment(Str k, tamer::event<> e);
    inline void length(Str k, tamer::event<int32_t> e);
    tamed void stats(tamer::event<Json> e);
    tamed void pace(tamer::event<> e);

    // only here for interface compliance
    inline void done_get(Str k);

  private:
    const Hosts* hosts_;
    const Partitioner* part_;
    std::vector<MemcacheClient*> clients_;

    inline MemcacheClient* cache_for(Str k);
};

inline void MemcacheMultiClient::get(Str k, tamer::event<String> e) {
    cache_for(k)->get(k, e);
}

inline void MemcacheMultiClient::get(Str k, int32_t begin, tamer::event<String> e) {
    cache_for(k)->get(k, begin, e);
}

inline void MemcacheMultiClient::set(Str k, Str v, tamer::event<> e) {
    cache_for(k)->set(k, v, e);
}

inline void MemcacheMultiClient::append(Str k, Str v, tamer::event<> e) {
    cache_for(k)->append(k, v, e);
}

inline void MemcacheMultiClient::increment(Str k, tamer::event<> e) {
    cache_for(k)->increment(k, e);
}

inline void MemcacheMultiClient::length(Str k, tamer::event<int32_t> e) {
    cache_for(k)->length(k, e);
}

inline void MemcacheMultiClient::done_get(Str) {
}

inline MemcacheClient* MemcacheMultiClient::cache_for(Str key) {
    int32_t owner = part_->owner(key);
    assert(owner >= 0 && owner < (int32_t)clients_.size() && "Make sure the partition function is correct.");
    return clients_[owner];
}

}

#endif
