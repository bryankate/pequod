// -*- mode: c++ -*-
#ifndef PQTWITTER_NEW_HH
#define PQTWITTER_NEW_HH 1
#include <boost/random.hpp>
#include <utility>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <iostream>
#include <stdint.h>
#include <tamer/tamer.hh>
#include <sys/resource.h>
#include "time.hh"
#include "json.hh"
#include "pqjoin.hh"
#include "pqserver.hh"
#include "pqlog.hh"
#include "pqmemory.hh"

namespace pq {
using tamer::event;
using tamer::preevent;
class TwitterNewPopulator;

#define END_TIME        ((uint32_t)-1)
#define BASE_TIME       1000000000
#define LOGIN_WINDOW    1000000
#define OVERLAP         0          // subtracted from last check time to define beg_scan
#define SKEW            5000       // subtracted from now to define end_scan

// Keep barebones info on each user.
struct TwitterGraphNode {
  public:
    TwitterGraphNode(uint32_t uid);
    inline uint32_t uid() const { return uid_; }
    inline uint32_t nfollowers() const { return nfollowers_; }

    // a specialized comparison method for sorting the user list. this is
    // only used for printing debug info.
    enum CompareField { comp_uid = 0, comp_nfollowers, n_comp };
    struct Compare {
        Compare(CompareField field);
        inline bool operator() (const TwitterGraphNode* a, const TwitterGraphNode* b) const;
        inline bool operator() (const uint32_t& a, const TwitterGraphNode* b) const;
        uint32_t field_;
    };

  private:
    uint32_t uid_;
    uint32_t nfollowers_;

    friend class TwitterNewPopulator;
};

// Has extra bookkeeping for users that do timeline checks. Each client
// may handle a small subset of such users to split the load across
// processes.
struct TwitterUser : public TwitterGraphNode {
  public:
    TwitterUser(uint32_t uid);

    uint32_t last_read_;
};

enum TwitterOp { op_post = 0, op_subscribe, op_login, op_logout, op_check, n_op };

class TwitterNewPopulator {
  public:
    typedef boost::mt19937 generator_type;
    typedef boost::random_number_generator<boost::mt19937> rng_type;
    typedef boost::random::discrete_distribution<> op_dist_type;
    typedef boost::random::discrete_distribution<> post_dist_type;
    typedef boost::random::uniform_int_distribution<> uni_dist_type;

    TwitterNewPopulator(const Json& param);

    inline uint32_t groupid() const { return groupid_; }
    inline uint32_t duration() const { return duration_; }
    inline uint32_t popduration() const { return popduration_; }
    inline uint32_t postlimit() const { return postlimit_; }
    inline uint32_t checklimit() const { return checklimit_; }
    inline double pct_active() const { return pct_active_; }
    inline bool initialize() const { return initialize_; }
    inline bool populate() const { return populate_; }
    inline bool execute() const { return execute_; }
    inline bool push() const { return push_; }
    inline bool pull() const { return pull_; }
    inline bool pull_celeb() const { return celebthresh_; }
    inline bool fetch() const { return fetch_; }
    inline bool prevalidate() const { return prevalidate_; }
    inline bool prevalidate_inactive() const { return prevalidate_inactive_; }
    inline bool writearound() const { return writearound_; }
    inline bool log() const { return log_; }
    inline bool synchronous() const { return synchronous_; }
    inline bool binary() const { return binary_; }
    inline bool verbose() const { return verbose_; }

    inline uint32_t begin_managed() const { return groupbegin_; }
    inline uint32_t end_managed() const { return groupend_; }
    inline const TwitterGraphNode* user(uint32_t user) const { return users_[user]; }
    inline TwitterUser* managed_user(uint32_t user);
    inline bool is_celebrity(uint32_t user) const;

    void make_subscriptions(generator_type& gen, std::vector<std::pair<uint32_t, uint32_t>>& subs);
    void print_subscription_statistics(std::ostream& stream);

    inline uint32_t rand_op(generator_type& gen) { return op_dist_(gen); }
    inline uint32_t rand_user_all(generator_type& gen) { return uni_dist_(gen); }
    inline uint32_t rand_user_managed(generator_type& gen) { return group_uni_dist_(gen); }
    inline uint32_t rand_user_post(generator_type& gen) { return post_dist_(gen); }

    static const char tweet_data[];

  private:
    uint32_t nusers_;
    uint32_t ngroups_;
    uint32_t groupid_;
    uint32_t groupbegin_;
    uint32_t groupend_;
    uint32_t duration_;
    uint32_t popduration_;
    uint32_t postlimit_;
    uint32_t checklimit_;
    bool initialize_;
    bool populate_;
    bool execute_;
    bool push_;
    bool pull_;
    bool fetch_;
    bool prevalidate_;
    bool prevalidate_inactive_;
    bool writearound_;
    bool log_;
    bool synchronous_;
    bool visualize_;
    bool binary_;
    bool verbose_;
    uint32_t celebthresh_;
    double pct_active_;
    String graph_file_;
    uint32_t min_followers_;
    uint32_t min_subs_;
    uint32_t max_subs_;
    uint32_t max_followers_;
    double shape_;

    std::vector<TwitterGraphNode*> users_;
    op_dist_type op_dist_;
    post_dist_type post_dist_;
    uni_dist_type uni_dist_;
    uni_dist_type group_uni_dist_;

    TwitterNewPopulator(const TwitterNewPopulator&) = delete;
    TwitterNewPopulator& operator=(const TwitterNewPopulator&) = delete;

    uint32_t* subscribe_probabilities(generator_type& gen);
    void import_subscriptions(generator_type& gen, std::vector<std::pair<uint32_t, uint32_t>>& subs);
    void synthetic_subscriptions(generator_type& gen, std::vector<std::pair<uint32_t, uint32_t>>& subs);
    void finish_make_subscriptions(generator_type& gen);
    void make_users();
    bool in_group(uint32_t u) const;
};

inline TwitterUser* TwitterNewPopulator::managed_user(uint32_t user) {
    assert(in_group(user));
    return reinterpret_cast<TwitterUser*>(users_[user]);
}

inline bool TwitterNewPopulator::is_celebrity(uint32_t user) const {
    return (celebthresh_ && (users_[user]->nfollowers_ > celebthresh_));
}


template <typename S>
class TwitterNewShim {
  public:
    TwitterNewShim(S& server, TwitterNewPopulator& tp);

    typedef typename S::iterator iterator;
    typedef typename S::scan_result scan_result;

    tamed void initialize(tamer::event<> e);

    template <typename R>
    inline void subscribe(uint32_t subscriber, uint32_t poster, tamer::preevent<R> e);
    template <typename R>
    inline void mark_celebrity(uint32_t poster, tamer::preevent<R> done);
    template <typename R>
    inline void post(uint32_t poster, uint32_t time, const String& value, bool celeb, tamer::preevent<R> e);
    inline void prepare_push_post(uint32_t poster, uint32_t time, const String& value);
    template <typename R>
    inline void push_post(uint32_t subscriber, tamer::preevent<R> e);
    template <typename R>
    void timeline_scan(uint32_t subscriber,
                       uint32_t start_time, uint32_t end_time,
                       preevent<R, scan_result> e);
    template <typename R>
    void timeline_add_count(uint32_t subscriber,
                            uint32_t start_time, uint32_t end_time,
                            preevent<R, size_t> e);
    template <typename R>
    inline void follower_scan(uint32_t poster, tamer::preevent<R, scan_result> e);
    template <typename R>
    inline void post_scan(uint32_t poster, uint32_t beg_scan, uint32_t end_scan,
                          tamer::preevent<R, scan_result> e);
    template <typename R>
    inline void pace(tamer::preevent<R> done);
    template <typename R>
    inline void stats(tamer::preevent<R, Json> e);
    template <typename R>
    inline void control(const Json& cmd, tamer::preevent<R, Json> e);

  private:
    S& server_;
    TwitterNewPopulator& tp_;
    char buf_[key_capacity];
    String value_;
};

template <typename S>
TwitterNewShim<S>::TwitterNewShim(S& server, TwitterNewPopulator& tp)
    : server_(server), tp_(tp) {
}

tamed template <typename S>
void TwitterNewShim<S>::initialize(tamer::event<> done) {
    tvars { Json j[4]; }
    if (tp_.push()) {
        twait {
            // The purpose of this join is to install triecuts for fairness
            server_.add_join("xxx|", "xxx}",
                             "xxx|<user>|<time>|<poster> = "
                             "copy p|<poster>|<time> "
                             "using s|<user>|<poster>, "
                             "t|<user>|<time>|<poster> pull " +
                             String((tp_.binary()) ? "where user:4n, time:4n, poster:4n"
                                                   : "where user:8, time:10, poster:8"),
                             make_event(j[0]));
        }
    }
    else {
        twait {
            server_.add_join("t|", "t}",
                             "t|<user>|<time>|<poster> = "
                             "copy p|<poster>|<time> " +
                             String((tp_.pull()) ? "pull " : "") +
                             "using s|<user>|<poster> " +
                             String((tp_.binary()) ? "where user:4n, time:4n, poster:4n"
                                                   : "where user:8, time:10, poster:8"),
                             make_event(j[0]));

            if (tp_.pull_celeb()) {
                server_.add_join("ct|", "ct}",
                                 "ct|<time>|<poster> = "
                                 "copy cp|<poster>|<time> " +
                                 String((tp_.binary()) ? "where poster:4n, time:4n"
                                                       : "where poster:8, time:10"),
                                 make_event(j[3]));
                server_.add_join("cs|", "cs}",
                                 "cs|<user>|<poster> = "
                                 "copy c|<poster> "
                                 "using s|<user>|<poster> " +
                                 String((tp_.binary()) ? "where user:4n, poster:4n"
                                                       : "where user:8, poster:10"),
                                 make_event(j[2]));
                server_.add_join("t|", "t}",
                                 "t|<user>|<time>|<poster> = "
                                 "pull copy ct|<time>|<poster> "
                                 "using filter cs|<user>|<poster> " +
                                 String((tp_.binary()) ? "where user:4n, time:4n, poster:4n"
                                                       : "where user:8, time:10, poster:8"),
                                 make_event(j[1]));
            }
        }

        for (uint32_t i = 0; i < 4; ++i)
            if (j[i]["message"])
                std::cerr << "installing join: " << j[i] << "\n";
    }

    done();
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::subscribe(uint32_t subscriber, uint32_t poster, tamer::preevent<R> done) {
    if (tp_.binary()) {
        memcpy(buf_, "s|XXXX|XXXX", 11);
        write_in_net_order(buf_ + 2, subscriber);
        write_in_net_order(buf_ + 7, poster);
        if (tp_.writearound())
            server_.insert_db(Str(buf_, 11), Str("1", 1), done);
        else
            server_.insert(Str(buf_, 11), Str("1", 1), done);
    }
    else {
        sprintf(buf_, "s|%08u|%08u", subscriber, poster);
        if (tp_.writearound())
            server_.insert_db(Str(buf_, 19), Str("1", 1), done);
        else
            server_.insert(Str(buf_, 19), Str("1", 1), done);
    }
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::mark_celebrity(uint32_t poster, tamer::preevent<R> done) {
    if (tp_.binary()) {
        memcpy(buf_, "c|XXXX", 6);
        write_in_net_order(buf_ + 2, poster);
        if (tp_.writearound())
            server_.insert_db(Str(buf_, 6), Str("1", 1), done);
        else
            server_.insert(Str(buf_, 6), Str("1", 1), done);
    }
    else {
        sprintf(buf_, "c|%08u", poster);
        if (tp_.writearound())
            server_.insert_db(Str(buf_, 10), Str("1", 1), done);
        else
            server_.insert(Str(buf_, 10), Str("1", 1), done);
    }
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::post(uint32_t poster, uint32_t time, const String& value,
                                    bool celeb, tamer::preevent<R> done) {
    if (tp_.binary()) {
        memcpy(buf_, "cp|XXXX|XXXX", 11);
        write_in_net_order(buf_ + 3, poster);
        write_in_net_order(buf_ + 8, time);
        if (tp_.writearound())
            server_.insert_db(Str(buf_ + !celeb, 11 + celeb), value, done);
        else
            server_.insert(Str(buf_ + !celeb, 11 + celeb), value, done);
    }
    else {
        sprintf(buf_, "cp|%08u|%010u", poster, time);
        if (tp_.writearound())
            server_.insert_db(Str(buf_ + !celeb, 21 + celeb), value, done);
        else
            server_.insert(Str(buf_ + !celeb, 21 + celeb), value, done);
    }
}

template <typename S>
inline void TwitterNewShim<S>::prepare_push_post(uint32_t poster, uint32_t time,
                                              const String& value) {
    if (tp_.binary()) {
        memcpy(buf_, "t|XXXX|XXXX|XXXX", 16);
        write_in_net_order(buf_ + 7, time);
        write_in_net_order(buf_ + 12, poster);
    }
    else
        sprintf(buf_, "t|%08u|%010u|%08u", 0, time, poster);

    value_ = value;
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::push_post(uint32_t subscriber, tamer::preevent<R> done) {
    if (tp_.binary()) {
        write_in_net_order(buf_ + 2, subscriber);
        server_.insert(Str(buf_, 16), value_, done);
    }
    else {
        sprintf(buf_ + 2, "%08u", subscriber);
        buf_[10] = '|'; // replace terminating null
        server_.insert(Str(buf_, 30), value_, done);
    }
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::timeline_scan(uint32_t subscriber,
                                             uint32_t start_time, uint32_t end_time,
                                             tamer::preevent<R, scan_result> done) {

    if (tp_.binary()) {
        memcpy(buf_, "t|XXXX|XXXX t|XXXX} t|XXXX|XXXX", 31);
        write_in_net_order(buf_ + 2, subscriber);
        write_in_net_order(buf_ + 7, start_time);
        write_in_net_order(buf_ + 14, subscriber);
        write_in_net_order(buf_ + 22, subscriber);
        write_in_net_order(buf_ + 27, end_time);
        server_.scan(Str(buf_, 11), Str(buf_ + 12, 7), Str(buf_ + 20, 11), done);
    }
    else {
        sprintf(buf_, "t|%08u|%010u t|%08u} t|%08u|%010u",
                subscriber, start_time, subscriber, subscriber, end_time);
        server_.scan(Str(buf_, 21), Str(buf_ + 22, 11), Str(buf_ + 34, 21), done);
    }
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::timeline_add_count(uint32_t subscriber,
                                                  uint32_t start_time, uint32_t end_time,
                                                  tamer::preevent<R, size_t> done) {
    if (tp_.binary()) {
        memcpy(buf_, "t|XXXX|XXXX t|XXXX} t|XXXX|XXXX", 31);
        write_in_net_order(buf_ + 2, subscriber);
        write_in_net_order(buf_ + 7, start_time);
        write_in_net_order(buf_ + 14, subscriber);
        write_in_net_order(buf_ + 22, subscriber);
        write_in_net_order(buf_ + 27, end_time);
        server_.add_count(Str(buf_, 11), Str(buf_ + 12, 7), Str(buf_ + 20, 11), done);
    }
    else {
        sprintf(buf_, "t|%08u|%010u t|%08u} t|%08u|%010u",
                subscriber, start_time, subscriber, subscriber, end_time);
        server_.add_count(Str(buf_, 21), Str(buf_ + 22, 11), Str(buf_ + 34, 21), done);
    }
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::follower_scan(uint32_t poster,
                                             tamer::preevent<R, scan_result> done) {

    if (tp_.binary()) {
        memcpy(buf_, "s|XXXX s|XXXX}", 14);
        write_in_net_order(buf_ + 2, poster);
        write_in_net_order(buf_ + 9, poster);
        server_.scan(Str(buf_, 6), Str(buf_ + 7, 7), done);
    }
    else {
        sprintf(buf_, "s|%08u s|%08u}", poster, poster);
        server_.scan(Str(buf_, 10), Str(buf_ + 11, 11), done);
    }
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::post_scan(uint32_t poster,
                                         uint32_t start_time, uint32_t end_time,
                                         tamer::preevent<R, scan_result> done) {
    if (tp_.binary()) {
        memcpy(buf_, "p|XXXX|XXXX p|XXXX|XXXX", 23);
        write_in_net_order(buf_ + 2, poster);
        write_in_net_order(buf_ + 7, start_time);
        write_in_net_order(buf_ + 14, poster);
        write_in_net_order(buf_ + 19, end_time);
        server_.scan(Str(buf_, 11), Str(buf_ + 12, 11), done);
    }
    else {
        sprintf(buf_, "p|%08u|%010u p|%08u|%010u",
                poster, start_time, poster, end_time);
        server_.scan(Str(buf_, 21), Str(buf_ + 22, 21), done);
    }
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::pace(tamer::preevent<R> done) {
    server_.pace(done);
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::stats(tamer::preevent<R, Json> done) {
    server_.stats(done);
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::control(const Json& cmd, tamer::preevent<R, Json> done) {
    server_.control(cmd, done);
}

template <typename S>
class TwitterNewDBShim {
  public:
    TwitterNewDBShim(S& server, TwitterNewPopulator& tp);
    class iterator;
    class scanpair {
      public:
        scanpair() = default;
        scanpair(const Json* it)
            : it_(it) {
        }
        const String& key() const {
            return it_[0].as_s();
        }
        const String& value() const {
            return it_[1].as_s();
        }
      private:
        const Json* it_;
        friend class iterator;
    };
    class iterator : public std::iterator<std::random_access_iterator_tag, scanpair> {
      public:
        iterator() = default;
        explicit iterator(const Json* it)
            : it_(it) {
        }

        void operator++() {
            it_.it_ += 2;
        }
        void operator--() {
            it_.it_ -= 2;
        }
        size_t operator-(iterator x) const {
            return (it_.it_ - x.it_.it_) / 2;
        }

        bool operator==(iterator x) const {
            return it_.it_ == x.it_.it_;
        }
        bool operator!=(iterator x) const {
            return it_.it_ != x.it_.it_;
        }

        scanpair operator*() const {
            return it_;
        }
        const scanpair* operator->() const {
            return &it_;
        }
      private:
        scanpair it_;
    };
    class scan_result {
      public:
        scan_result() = default;
        inline scan_result(Json&& x)
            : result_(std::move(x)) {
        }
        inline iterator begin() const {
            return iterator(result_.array_data());
        }
        inline iterator end() const {
            return iterator(result_.array_data() + result_.size());
        }
        inline void flush() {
            result_.clear();
        }
        inline size_t size() const {
            return result_.size() / 2;
        }
      private:
        mutable Json result_;
    };

    tamed void initialize(tamer::event<> e);

    tamed void subscribe(uint32_t subscriber, uint32_t poster, tamer::event<> e);
    inline void mark_celebrity(uint32_t poster, tamer::event<> done);
    tamed void post(uint32_t poster, uint32_t time, const String& value, bool celeb, tamer::event<> e);
    inline void prepare_push_post(uint32_t poster, uint32_t time, const String& value);
    inline void push_post(uint32_t subscriber, tamer::event<> e);
    tamed void timeline_scan(uint32_t subscriber,
                       uint32_t start_time, uint32_t end_time,
                       event<scan_result> e);
    tamed void timeline_add_count(uint32_t subscriber,
                            uint32_t start_time, uint32_t end_time,
                            event<size_t> e);
    inline void follower_scan(uint32_t poster, tamer::event<scan_result> e);
    inline void post_scan(uint32_t poster, uint32_t beg_scan, uint32_t end_scan,
                          tamer::event<scan_result> e);
    inline void pace(tamer::event<> done);
    inline void stats(tamer::event<Json> e);
    inline void control(const Json& cmd, tamer::event<Json> e);

  private:
    S& server_;
    TwitterNewPopulator& tp_;
    char buf_[key_capacity];
    String value_;
};

template <typename S>
TwitterNewDBShim<S>::TwitterNewDBShim(S& server, TwitterNewPopulator& tp)
    : server_(server), tp_(tp) {
}

tamed template <typename S>
void TwitterNewDBShim<S>::initialize(tamer::event<> done) {
    tvars { Json j; }
    server_.connect();
    twait {
        server_.execute("PREPARE subscribe(int,int) AS "
                            "INSERT INTO s VALUES($1,$2)", make_event(j));
        server_.execute("PREPARE post(int,text,int) AS "
                            "INSERT INTO p VALUES($1,$2,to_timestamp($3))", make_event(j));
        server_.execute("PREPARE timeline_scan(int,int,int) AS "
                            "SELECT t.usr, t.poster, t.value, t.time "
                            "FROM t "
                            "WHERE t.user = $1 "
                              "AND t.time > to_timestamp($2) "
                              "AND t.time < to_timestamp($3)", make_event(j));
        server_.execute("PREPARE timeline_add_count(int,int,int) AS "
                            "SELECT COUNT(*) "
                            "FROM t "
                            "WHERE t.user = $1 "
                              "AND t.time > to_timestamp($2) "
                              "AND t.time < to_timestamp($3)", make_event(j));
    }
    done();
}

tamed template <typename S>
void TwitterNewDBShim<S>::subscribe(uint32_t subscriber, uint32_t poster, tamer::event<> done) {
    tvars { Json j; }
    twait {
        server_.execute("EXECUTE subscribe(" + String(subscriber) + "," + String(poster) + ")", make_event(j));
    }
    done();
}

template <typename S>
inline void TwitterNewDBShim<S>::mark_celebrity(uint32_t poster, tamer::event<> done) {
    (void) poster;
    (void) done;
    mandatory_assert(false && "Function not supported in this mode.");
}

tamed template <typename S>
void TwitterNewDBShim<S>::post(uint32_t poster, uint32_t time, const String& value,
                                    bool celeb, tamer::event<> done) {
    tvars { Json j; }
    twait{
        server_.execute("EXECUTE post(" + String(poster) + "," + String(value) +  "," + String(time) + ")", make_event(j));
    }
    done();
}

template <typename S>
inline void TwitterNewDBShim<S>::prepare_push_post(uint32_t poster, uint32_t time,
                                              const String& value) {
    (void) poster;
    (void) time;
    (void) value;
    mandatory_assert(false && "Function not supported in this mode.");
}

template <typename S>
inline void TwitterNewDBShim<S>::push_post(uint32_t subscriber, tamer::event<> done) {
    (void) subscriber;
    (void) done;
    mandatory_assert(false && "Function not supported in this mode.");
}

tamed template <typename S>
void TwitterNewDBShim<S>::timeline_scan(uint32_t subscriber,
                                             uint32_t start_time, uint32_t end_time,
                                             tamer::event<scan_result> done) {
    tvars { Json j, rj; }
    twait {
        server_.execute("EXECUTE timeline_scan(" + String(subscriber) + "," + String(start_time) +  "," + String(end_time) + ")", make_event(j));
    }
    std::vector<String> return_vector;
    for (auto it = j.abegin(); it < j.aend(); ) {
        auto usr = *it;
        ++it;
        auto poster = *it;
        ++it;
        auto value = *it;
        ++it;
        auto time = *it;
        ++it;
        std::cerr << "usr(" << usr << ") poster(" << poster << ") value(" << value << ") time(" << time << ")" << std::endl;
        memcpy(buf_, "t|XXXX|XXXX|XXXX", 16);
        write_in_net_order(buf_ + 2, usr.to_i());
        write_in_net_order(buf_ + 7, poster.to_i());
        write_in_net_order(buf_ + 12, time.to_i());
        return_vector.push_back(buf_);
        return_vector.push_back(value.to_s());
    }
    done(scan_result(Json(return_vector)));
}

tamed template <typename S>
void TwitterNewDBShim<S>::timeline_add_count(uint32_t subscriber,
                                                  uint32_t start_time, uint32_t end_time,
                                                  tamer::event<size_t> done) {
    tvars { Json j; }
    twait {
        server_.execute("EXECUTE timeline_add_count(" + String(subscriber) + "," + String(start_time) +  "," + String(end_time) + ")", make_event(j));
    }
    auto count = j[1].to_i();
    std::cerr << "returning count(" << count << ")" << std::endl;
    done(count);
}

template <typename S>
inline void TwitterNewDBShim<S>::follower_scan(uint32_t poster,
                                             tamer::event<scan_result> done) {
    (void) poster;
    (void) done;
    mandatory_assert(false && "Function not supported in this mode.");
}

template <typename S>
inline void TwitterNewDBShim<S>::post_scan(uint32_t poster,
                                         uint32_t start_time, uint32_t end_time,
                                         tamer::event<scan_result> done) {
    (void) poster;
    (void) start_time;
    (void) end_time;
    (void) done;
    mandatory_assert(false && "Function not supported in this mode.");
}

template <typename S>
inline void TwitterNewDBShim<S>::pace(tamer::event<> done) {
    done();
//    mandatory_assert(false && "Function not supported in this mode.");
}

template <typename S>
inline void TwitterNewDBShim<S>::stats(tamer::event<Json> done) {
    done(Json());
//    mandatory_assert(false && "Function not supported in this mode.");
}

template <typename S>
inline void TwitterNewDBShim<S>::control(const Json& cmd, tamer::event<Json> done) {
    (void) cmd;
    done(Json());
//    mandatory_assert(false && "Function not supported in this mode.");
}


template <typename S>
class TwitterNewRunner {
  public:
    TwitterNewRunner(S& server, TwitterNewPopulator& tp);

    tamed void initialize(tamer::event<> done);
    tamed void populate(tamer::event<> done);
    tamed void run(tamer::event<> done);

  private:
    S& server_;
    TwitterNewPopulator& tp_;
    std::deque<uint32_t> active_;
    std::vector<uint32_t> inactive_;
    std::deque<uint32_t> loggedin_;
    uint32_t currtime_;
    tamer::event<> trigger_;
    Log log_;

    template <typename R>
    void subscribe(uint32_t s, uint32_t p, uint32_t time, preevent<R> e);
    tamed void prevalidate(TwitterUser* user, event<> e);
    tamed void check(TwitterUser* user, uint32_t time,
                     uint32_t beg_scan, uint32_t end_scan, event<uint32_t> e);
    tamed void post(uint32_t u, uint32_t time, Str value, event<> e);
    tamed void backfill(uint32_t u, uint32_t f, uint32_t time, event<uint32_t> e);
    tamed void periodic_logger(tamer::event<> done);
};

template <typename S>
inline TwitterNewRunner<S>::TwitterNewRunner(S& server, TwitterNewPopulator& tp)
    : server_(server), tp_(tp), currtime_(BASE_TIME), log_(tstamp()) {
}

template <typename S> template <typename R>
void TwitterNewRunner<S>::subscribe(uint32_t subscriber, uint32_t poster,
                                    uint32_t time, preevent<R> e) {
    if (tp_.log())
        fprintf(stderr, "%d: subscribe s|%08d|%08d\n", time, subscriber, poster);

    // in client push mode we reverse the subscriber key to make followers list
    server_.subscribe((tp_.push()) ? poster : subscriber,
                      (tp_.push()) ? subscriber : poster,
                      e);
}

tamed template <typename S>
void TwitterNewRunner<S>::prevalidate(TwitterUser* user, event<> done) {
    tvars {
        size_t count = 0;
    }

    twait { server_.timeline_add_count(user->uid(), 0, END_TIME, make_event(count)); }
    done();
}

tamed template <typename S>
void TwitterNewRunner<S>::check(TwitterUser* user, uint32_t time,
                                uint32_t beg_scan, uint32_t end_scan,
                                event<uint32_t> done) {
    tvars {
        typename S::scan_result sr;
        size_t count = 0;
    }

    if (tp_.fetch() || tp_.log()) {
        twait { server_.timeline_scan(user->uid(), beg_scan, end_scan,
                                      make_event(sr)); }
        count = sr.size();

        if (tp_.log()) {
            fprintf(stderr, "%d: scan [t|%08u|%010u, t|%08u|%010u)\n",
                    time, user->uid(), beg_scan, user->uid(), end_scan);

            for (auto it = sr.begin(); it != sr.end(); ++it) {
                if (tp_.binary()) {
                    std::cerr << "  t|" << read_in_net_order<uint32_t>(it->key().data() + 2)
                                  << "|" << read_in_net_order<uint32_t>(it->key().data() + 7)
                                  << "|" << read_in_net_order<uint32_t>(it->key().data() + 12)
                                  << ": " << it->value() << "\n";
                }
                else
                    std::cerr << "  " << it->key() << ": " << it->value() << "\n";
            }
        }
    }
    else
        twait { server_.timeline_add_count(user->uid(), beg_scan, end_scan,
                                           make_event(count)); }

    loggedin_.push_back(user->uid());
    trigger_.trigger();

    done(done.result() + count);
}

tamed template <typename S>
void TwitterNewRunner<S>::post(uint32_t u, uint32_t time, Str value, event<> e) {
    tvars {
        uint32_t s;
        typename S::scan_result sr;
        tamer::gather_rendezvous gr;
    }

    if (tp_.log())
        fprintf(stderr, "%d: post p|%08d|%010d\n", time, u, time);

    server_.post(u, time, value, tp_.is_celebrity(u), gr.make_event());

    if (tp_.push()) {
        server_.follower_scan(u, gr.make_event(sr));
        twait(gr);

        server_.prepare_push_post(u, time, value);

        for (auto it = sr.begin(); it != sr.end(); ++it) {
            if (tp_.binary())
                s = read_in_net_order<uint32_t>(it->key().data() + 7);
            else
                s = Str(it->key().data() + 11, 8).to_i();
            server_.push_post(s, gr.make_event());
        }
    }

    twait(gr);
    e();
}

tamed template <typename S>
void TwitterNewRunner<S>::backfill(uint32_t u, uint32_t f, uint32_t time, event<uint32_t> e) {
    assert(tp_.push());

    tvars {
        uint32_t ptime;
        typename S::scan_result sr;
        tamer::gather_rendezvous gr;
    }

    server_.post_scan(f, time - LOGIN_WINDOW, END_TIME, gr.make_event(sr));
    twait(gr);

    for (auto it = sr.begin(); it != sr.end(); ++it) {
        if (tp_.binary())
            ptime = read_in_net_order<uint32_t>(it->key().data() + 7);
        else
            ptime = Str(it->key().data() + 11, 10).to_i();
        server_.prepare_push_post(f, ptime, it->value());
        server_.push_post(u, gr.make_event());
    }
    twait(gr);

    e(e.result() + sr.size());
}

tamed template <typename S>
void TwitterNewRunner<S>::initialize(tamer::event<> done) {
    if (tp_.initialize() && !tp_.groupid())
        twait { server_.initialize(make_event()); }
    done();
}

tamed template <typename S>
void TwitterNewRunner<S>::populate(tamer::event<> done) {
    tvars {
        boost::mt19937 gen;
        uint32_t u, s;
        uint32_t post_end_time = this->currtime_ + this->tp_.popduration();
        std::vector<std::pair<uint32_t, uint32_t>> subs;
        Json j;
        tamer::gather_rendezvous gr;
    }
    gen.seed(112181 + tp_.groupid());

    if (!tp_.populate() && !tp_.execute())
        goto finish;

    if (tp_.verbose()) { std::cerr << "Creating social graph." << std::endl; }
    tp_.make_subscriptions(gen, subs);
    if (!tp_.groupid())
        tp_.print_subscription_statistics(std::cerr);

    // in some experiments we pre-populate the servers using another process
    if (!tp_.populate())
        goto finish;

    if (tp_.verbose()) { std::cerr << "Building subscription table." << std::endl; }
    for (s = 0; s != subs.size(); ++s) {
        subscribe(subs[s].first, subs[s].second, currtime_, gr.make_event());
        twait { server_.pace(make_event()); }
    }

    for (u = tp_.begin_managed(); u != tp_.end_managed(); ++u)
        if (tp_.is_celebrity(u))
            server_.mark_celebrity(u, gr.make_event());
    twait(gr);

    if (tp_.verbose()) { std::cerr << "Populating twittersphere." << std::endl; }
    while(currtime_ < post_end_time) {
        post(tp_.rand_user_post(gen), currtime_,
             String(TwitterNewPopulator::tweet_data, 5), gr.make_event());
        ++currtime_;

        twait{ server_.pace(make_event()); }
    }
    twait(gr);

    twait { server_.control(Json().set("flush_db_queue", true), make_event(j)); }

    finish:
    currtime_ = post_end_time;
    done();
}

tamed template <typename S>
void TwitterNewRunner<S>::periodic_logger(tamer::event<> done) {
    tvars {
        struct rusage u, lu;
        uint64_t now, before, utime, stime;
        double scale = 1.0 / 10000;
    }
    before = 0;
    memset(&lu, 0, sizeof(struct rusage));

    while(done) {
        mandatory_assert(getrusage(RUSAGE_SELF, &u) == 0, "Failed to getrusage.");
        now = tstamp();
        utime = tv2us(u.ru_utime) - tv2us(lu.ru_utime);
        stime = tv2us(u.ru_stime) - tv2us(lu.ru_stime);

        log_.record_at("mem_max_rss_mb", now, maxrss_mb(u.ru_maxrss));
        log_.record_at("utime_us", now, utime);
        log_.record_at("stime_us", now, stime);
        log_.record_at("cpu_pct", now, (before) ? ((utime + stime) * scale / fromus(now - before)) : 0);

        lu = u;
        before = now;
        twait volatile { tamer::at_delay_sec(1, make_event()); }
    }
}

class RandomAdapter {
  public:
    RandomAdapter(boost::mt19937& gen) : gen_(gen) { }
    uint32_t operator()(uint32_t arg) { return gen_() % arg; }
  private:
    boost::mt19937& gen_;
};

tamed template <typename S>
void TwitterNewRunner<S>::run(tamer::event<> done) {
    tvars {
        boost::mt19937 gen;
        boost::uniform_real<> active_rng(0,100);
        struct rusage ru[2];
        struct timeval tv[2];
        uint32_t beg_time = this->currtime_;
        uint32_t end_time = beg_time + this->tp_.duration();
        uint32_t postlimit = this->tp_.postlimit();
        uint32_t checklimit = this->tp_.checklimit();
        uint32_t u, beg_scan, end_scan, slot;
        uint32_t npost = 0, nbackpost = 0, nsubscribe = 0, nlogout = 0,
                 nlogin = 0, ncheck = 0, nread = 0, nfull = 0;
        TwitterUser* user = NULL;
        typename S::scan_result scan_result;
        Json old_stats, stats, logs, j;
        double prevalidate_time = 0;
        tamer::gather_rendezvous gr;
    }

    if (!tp_.execute()) {
        done();
        return;
    }

    gen.seed(13918 + tp_.groupid());
    periodic_logger(done);

    gettimeofday(&tv[0], 0);

    // create a working set of users
    if (tp_.verbose()) { std::cerr << "Selecting active users." << std::endl; }
    for (u = tp_.begin_managed(); u != tp_.end_managed(); ++u) {
        if (active_rng(gen) >= tp_.pct_active()) {
            inactive_.push_back(u);
            continue;
        }

        if (tp_.prevalidate()) {
            loggedin_.push_back(u);
            prevalidate(tp_.managed_user(u), gr.make_event());
            twait{ server_.pace(make_event()); }
        }
        else
            active_.push_back(u);
    }
    twait(gr);

    if (tp_.prevalidate_inactive()) {
        for (u = 0; u != inactive_.size(); ++u) {
            prevalidate(tp_.managed_user(inactive_[u]), gr.make_event());
            twait{ server_.pace(make_event()); }
        }
        twait(gr);
    }

    gettimeofday(&tv[1], 0);
    if (tp_.prevalidate() || tp_.prevalidate_inactive())
        prevalidate_time = to_real(tv[1] - tv[0]);

    std::random_shuffle(active_.begin(), active_.end(), RandomAdapter(gen));
    std::random_shuffle(loggedin_.begin(), loggedin_.end(), RandomAdapter(gen));
    if (tp_.prevalidate() && loggedin_.empty() && tp_.pct_active() > 0)
        assert(false && "There were no active users selected.");

    log_.clear();
    if (!tp_.groupid())
        twait { server_.control(Json().set("clear_log", true), make_event(j)); }

    twait { server_.stats(make_event(old_stats)); }

    if (tp_.verbose()) { std::cerr << "Starting workload." << std::endl; }
    getrusage(RUSAGE_SELF, &ru[0]);
    gettimeofday(&tv[0], 0);

    while (currtime_ < end_time &&
           ((postlimit) ? (npost < postlimit) : true) &&
           ((checklimit) ? (ncheck < checklimit) : true)) {
        user = nullptr;

        switch(tp_.rand_op(gen)) {
            case op_post:
                post(tp_.rand_user_post(gen), currtime_,
                     String(TwitterNewPopulator::tweet_data, 5),
                     gr.make_event());

                ++npost;
                break;

            case op_subscribe:
                user = tp_.managed_user(tp_.rand_user_managed(gen));
                uint32_t following;

                do {
                    following = tp_.rand_user_all(gen);
                } while (following == user->uid());

                subscribe(user->uid(), following, currtime_, gr.make_event());
                ++nsubscribe;

                if (tp_.push())
                    backfill(u, following, currtime_, gr.make_event(nbackpost));
                break;

            case op_logout:
                if (loggedin_.empty())
                    break;

                user = tp_.managed_user(loggedin_.front());
                user->last_read_ = 0;

                if (tp_.log())
                    fprintf(stderr, "%d: logout %08d\n", currtime_, user->uid());

                loggedin_.pop_front();
                active_.push_back(user->uid());
                ++nlogout;
                break;

            case op_login:
                do_login:
                if (!active_.empty()) {
                    user = tp_.managed_user(active_.front());
                    active_.pop_front();

                    if (tp_.log())
                        fprintf(stderr, "%d: login %08d\n", currtime_, user->uid());

                    ++nlogin;
                }
                // fall through to check timeline after login

            case op_check:
                if (!user) {
                    do_check:
                    if (!loggedin_.empty()) {
                        user = tp_.managed_user(loggedin_.front());
                        loggedin_.pop_front();
                    }
                    else if (!active_.empty())
                        goto do_login;
                    else {
                        // wait until there is a loggedin user that is not
                        // already refreshing its timeline
                        twait { trigger_ = make_event(); }
                        goto do_check;
                    }
                }

                beg_scan = user->last_read_;
                end_scan = currtime_ - SKEW;

                if (!beg_scan) {
                    beg_scan = currtime_ - LOGIN_WINDOW;
                    ++nfull;
                }
                else
                    beg_scan -= OVERLAP;

                user->last_read_ = end_scan;
                check(user, currtime_, beg_scan, end_scan, gr.make_event(nread));

                if (tp_.synchronous())
                    twait(gr);
                else
                    twait { server_.pace(make_event()); }

                ++ncheck;
                break;

            default:
                assert(false && "Unknown operation.");
        }

        ++currtime_;

        if (tp_.verbose()) {
            uint32_t diff = currtime_ - beg_time;
            if (currtime_ > beg_time && diff % (tp_.duration() / 10) == 0)
                std::cerr << diff / (tp_.duration() / 10) * 10 << "% complete" << std::endl;
        }
    }
    twait(gr);

    // do a final scan for every loggedin user. this helps to ensure that
    // each distributed experiment does roughly the same amount of work
    // despite differences in rpc ordering
    if (tp_.verbose()) { std::cerr << "Final scan." << std::endl; }
    for (u = 0; u < loggedin_.size(); ++u) {
        user = tp_.managed_user(loggedin_.front());
        loggedin_.pop_front();
        check(user, currtime_, user->last_read_, currtime_, gr.make_event(nread));
    }
    twait(gr);

    getrusage(RUSAGE_SELF, &ru[1]);
    gettimeofday(&tv[1], 0);

    twait { server_.stats(make_event(stats)); }
    twait { server_.control(Json().set("get_log", true), make_event(logs)); }

    if (!stats.is_array()) {
        old_stats = Json::make_array(old_stats);
        stats = Json::make_array(stats);
    }

    uint32_t s = 0;
    for (auto it = stats.abegin(); it != stats.aend(); ++it, ++s) {
        (*it)["server_user_time"] -= old_stats[s]["server_user_time"];
        (*it)["server_system_time"] -= old_stats[s]["server_system_time"];
        (*it)["server_wall_time"] -= old_stats[s]["server_wall_time"];
        (*it)["server_wall_time_insert"] -= old_stats[s]["server_wall_time_insert"];
        (*it)["server_wall_time_validate"] -= old_stats[s]["server_wall_time_validate"];
        (*it)["server_wall_time_evict"] -= old_stats[s]["server_wall_time_evict"];
        (*it)["server_wall_time_other"] -= old_stats[s]["server_wall_time_other"];
    }

    stats = Json().set("log", log_.as_json())
                  .set("server_logs", logs)
                  .set("server_stats", stats);

    stats.set("nposts", npost)
         .set("nbackposts", nbackpost)
         .set("nsubscribes", nsubscribe)
         .set("nchecks", ncheck)
         .set("nfull", nfull)
         .set("nposts_read", nread)
         .set("nactive", active_.size() + loggedin_.size())
         .set("nlogins", nlogin)
         .set("nlogouts", nlogout)
         .set("user_time", to_real(ru[1].ru_utime - ru[0].ru_utime))
         .set("system_time", to_real(ru[1].ru_stime - ru[0].ru_stime))
         .set("wall_time", to_real(tv[1] - tv[0]))
         .set("wall_time_prevalidate", prevalidate_time);
    std::cout << stats.unparse(Json::indent_depth(4)) << "\n";

    done();
}

tamed void run_twitter_new_remote(TwitterNewPopulator& tp, int client_port,
                                  const Hosts* hosts, const Hosts* dbhosts,
                                  const Partitioner* part);

} // namespace pq
#endif
