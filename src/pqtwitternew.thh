// -*- mode: c++ -*-
#ifndef PQTWITTER_NEW_HH
#define PQTWITTER_NEW_HH 1
#include <boost/random.hpp>
#include <utility>
#include <vector>
#include <set>
#include <iostream>
#include <stdint.h>
#include <tamer/tamer.hh>
#include <sys/resource.h>
#include "time.hh"
#include "json.hh"
#include "pqjoin.hh"
#include "pqserver.hh"
#include "pqlog.hh"

namespace pq {
using tamer::event;
using tamer::preevent;
class TwitterNewPopulator;

#define END_TIME        ((uint32_t)-1)
#define BASE_TIME       1000000000
#define LOGIN_WINDOW    10000
#define OVERLAP         0          // subtracted from last seen post to define beg_scan
#define SKEW            0          // subtracted from now to define end_scan

// Keep barebones info on each user.
struct TwitterGraphNode {
  public:
    TwitterGraphNode(uint32_t uid);
    inline uint32_t uid() const { return uid_; }
    inline uint32_t nfollowers() const { return nfollowers_; }

    // a specialized comparison method for sorting the user list. this is
    // only used for printing debug info.
    enum CompareField { comp_uid = 0, comp_nfollowers, n_comp };
    struct Compare {
        Compare(CompareField field);
        inline bool operator() (const TwitterGraphNode* a, const TwitterGraphNode* b) const;
        inline bool operator() (const uint32_t& a, const TwitterGraphNode* b) const;
        uint32_t field_;
    };

  private:
    uint32_t uid_;
    uint32_t nfollowers_;

    friend class TwitterNewPopulator;
};

// Has extra bookkeeping for users that do timeline checks. Each client
// may handle a small subset of such users to split the load across
// processes.
struct TwitterUser : public TwitterGraphNode {
  public:
    TwitterUser(uint32_t uid);

    uint32_t last_read_;
    bool pending_;
};

enum TwitterOp { op_post = 0, op_subscribe, op_login, op_logout, op_check, n_op };

class TwitterNewPopulator {
  public:
    typedef boost::mt19937 generator_type;
    typedef boost::random_number_generator<boost::mt19937> rng_type;
    typedef boost::random::discrete_distribution<> op_dist_type;
    typedef boost::random::discrete_distribution<> post_dist_type;
    typedef boost::random::uniform_int_distribution<> uni_dist_type;

    TwitterNewPopulator(const Json& param);

    inline uint32_t groupid() const { return groupid_; }
    inline uint32_t duration() const { return duration_; }
    inline uint32_t popduration() const { return popduration_; }
    inline uint32_t postlimit() const { return postlimit_; }
    inline double pct_active() const { return pct_active_; }
    inline bool populate() const { return populate_; }
    inline bool execute() const { return execute_; }
    inline bool push() const { return push_; }
    inline bool pull() const { return pull_; }
    inline bool pull_celeb() const { return celebthresh_; }
    inline bool fetch() const { return fetch_; }
    inline bool log() const { return log_; }
    inline bool synchronous() const { return synchronous_; }
    inline bool verbose() const { return verbose_; }

    inline uint32_t begin_managed() const { return groupbegin_; }
    inline uint32_t end_managed() const { return groupend_; }
    inline const TwitterGraphNode* user(uint32_t user) const { return users_[user]; }
    inline TwitterUser* managed_user(uint32_t user);
    inline bool is_celebrity(uint32_t user) const;

    void make_subscriptions(generator_type& gen, std::vector<std::pair<uint32_t, uint32_t>>& subs);
    void print_subscription_statistics(std::ostream& stream);

    inline uint32_t rand_op(generator_type& gen) { return op_dist_(gen); }
    inline uint32_t rand_user_all(generator_type& gen) { return uni_dist_(gen); }
    inline uint32_t rand_user_managed(generator_type& gen) { return group_uni_dist_(gen); }
    inline uint32_t rand_user_post(generator_type& gen) { return post_dist_(gen); }

    static const char tweet_data[];

  private:
    uint32_t nusers_;
    uint32_t ngroups_;
    uint32_t groupid_;
    uint32_t groupbegin_;
    uint32_t groupend_;
    uint32_t duration_;
    uint32_t popduration_;
    uint32_t postlimit_;
    bool populate_;
    bool execute_;
    bool push_;
    bool pull_;
    bool fetch_;
    bool log_;
    bool synchronous_;
    bool visualize_;
    bool verbose_;
    uint32_t celebthresh_;
    double pct_active_;
    String graph_file_;
    uint32_t min_followers_;
    uint32_t min_subs_;
    uint32_t max_subs_;
    uint32_t max_followers_;
    double shape_;

    std::vector<TwitterGraphNode*> users_;
    op_dist_type op_dist_;
    post_dist_type post_dist_;
    uni_dist_type uni_dist_;
    uni_dist_type group_uni_dist_;

    TwitterNewPopulator(const TwitterNewPopulator&) = delete;
    TwitterNewPopulator& operator=(const TwitterNewPopulator&) = delete;

    uint32_t* subscribe_probabilities(generator_type& gen);
    void import_subscriptions(generator_type& gen, std::vector<std::pair<uint32_t, uint32_t>>& subs);
    void synthetic_subscriptions(generator_type& gen, std::vector<std::pair<uint32_t, uint32_t>>& subs);
    void finish_make_subscriptions(generator_type& gen);
    void make_users();
    bool in_group(uint32_t u) const;
};

inline TwitterUser* TwitterNewPopulator::managed_user(uint32_t user) {
    assert(in_group(user));
    return reinterpret_cast<TwitterUser*>(users_[user]);
}

inline bool TwitterNewPopulator::is_celebrity(uint32_t user) const {
    return (celebthresh_ && (users_[user]->nfollowers_ > celebthresh_));
}


template <typename S>
class TwitterNewShim {
  public:
    TwitterNewShim(S& server);

    typedef typename S::iterator iterator;
    typedef typename S::scan_result scan_result;

    template <typename R>
    inline void subscribe(uint32_t subscriber, uint32_t poster, tamer::preevent<R> e);
    template <typename R>
    inline void mark_celebrity(uint32_t poster, tamer::preevent<R> done);
    template <typename R>
    inline void post(uint32_t poster, uint32_t time, const String& value, bool celeb, tamer::preevent<R> e);
    tamed void initialize(bool push, bool pull, bool pull_celeb, tamer::event<> e);
    inline void prepare_push_post(uint32_t poster, uint32_t time, const String& value);
    template <typename R>
    inline void push_post(uint32_t subscriber, tamer::preevent<R> e);
    template <typename R>
    void timeline_scan(uint32_t subscriber,
                       uint32_t start_time, uint32_t end_time,
                       preevent<R, scan_result> e);
    template <typename R>
    inline void follower_scan(uint32_t poster, tamer::preevent<R, scan_result> e);
    template <typename R>
    inline void post_scan(uint32_t poster, uint32_t beg_scan, uint32_t end_scan,
                          tamer::preevent<R, scan_result> e);
    template <typename R>
    inline void pace(tamer::preevent<R> done);
    template <typename R>
    inline void stats(tamer::preevent<R, Json> e);
    template <typename R>
    inline void control(const Json& cmd, tamer::preevent<R, Json> e);

  private:
    S& server_;
    char buf_[key_capacity];
    String value_;
};

template <typename S>
TwitterNewShim<S>::TwitterNewShim(S& server)
    : server_(server) {
}

tamed template <typename S>
void TwitterNewShim<S>::initialize(bool push, bool pull, bool pull_celeb,
                                   tamer::event<> done) {
    tvars { Json j[4]; }
    if (push) {
        twait {
            // The purpose of this join is to install triecuts for fairness
            server_.add_join("xxx|", "xxx}",
                             "xxx|<user>|<time>|<poster> = "
                             "copy p|<poster>|<time> "
                             "using s|<user>|<poster>, "
                             "t|<user>|<time>|<poster> pull "
                             "where user:4n, time:4n, poster:4n",
                             make_event(j[0]));
        }
    }
    else {
        twait {
            server_.add_join("t|", "t}",
                             "t|<user>|<time>|<poster> = "
                             "copy p|<poster>|<time> " +
                             String((pull) ? "pull " : "") +
                             "using s|<user>|<poster> "
                             "where user:4n, time:4n, poster:4n",
                             make_event(j[0]));

            if (pull_celeb) {
                server_.add_join("ct|", "ct}",
                                 "ct|<time>|<poster> = "
                                 "copy cp|<poster>|<time> "
                                 "where poster:4n, time:4n",
                                 make_event(j[3]));
                server_.add_join("cs|", "cs}",
                                 "cs|<user>|<poster> = "
                                 "copy c|<poster> "
                                 "using s|<user>|<poster> "
                                 "where user:4n, poster:4n",
                                 make_event(j[2]));
                server_.add_join("t|", "t}",
                                 "t|<user>|<time>|<poster> = "
                                 "pull copy ct|<time>|<poster> "
                                 "using filter cs|<user>|<poster> "
                                 "where user:4n, time:4n, poster:4n",
                                 make_event(j[1]));
            }
        }

        for (uint32_t i = 0; i < 4; ++i)
            if (j[i]["message"])
                std::cerr << "installing join: " << j[i] << "\n";
    }

    done();
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::subscribe(uint32_t subscriber, uint32_t poster, tamer::preevent<R> done) {
    memcpy(buf_, "s|XXXX|XXXX", 11);
    write_in_net_order(buf_ + 2, subscriber);
    write_in_net_order(buf_ + 7, poster);
    server_.insert(Str(buf_, 11), Str("1", 1), done);
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::mark_celebrity(uint32_t poster, tamer::preevent<R> done) {
    memcpy(buf_, "c|XXXX", 6);
    write_in_net_order(buf_ + 2, poster);
    server_.insert(Str(buf_, 6), Str("1", 1), done);
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::post(uint32_t poster, uint32_t time, const String& value,
                                    bool celeb, tamer::preevent<R> done) {
    memcpy(buf_, "cp|XXXX|XXXX", 11);
    write_in_net_order(buf_ + 3, poster);
    write_in_net_order(buf_ + 8, time);
    server_.insert(Str(buf_ + !celeb, 11 + celeb), value, done);
}

template <typename S>
inline void TwitterNewShim<S>::prepare_push_post(uint32_t poster, uint32_t time,
                                              const String& value) {
    memcpy(buf_, "t|XXXX|XXXX|XXXX", 16);
    write_in_net_order(buf_ + 7, time);
    write_in_net_order(buf_ + 12, poster);
    value_ = value;
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::push_post(uint32_t subscriber, tamer::preevent<R> done) {
    write_in_net_order(buf_ + 2, subscriber);
    server_.insert(Str(buf_, 16), value_, done);
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::timeline_scan(uint32_t subscriber,
                                             uint32_t start_time, uint32_t end_time,
                                             tamer::preevent<R, scan_result> done) {

    memcpy(buf_, "t|XXXX|XXXX t|XXXX|XXXX", 23);
    write_in_net_order(buf_ + 2, subscriber);
    write_in_net_order(buf_ + 7, start_time);
    write_in_net_order(buf_ + 14, subscriber);
    write_in_net_order(buf_ + 19, end_time);
    server_.scan(Str(buf_, 11), Str(buf_ + 12, 11), done);
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::follower_scan(uint32_t poster,
                                             tamer::preevent<R, scan_result> done) {
    memcpy(buf_, "s|XXXX s|XXXX}", 14);
    write_in_net_order(buf_ + 2, poster);
    write_in_net_order(buf_ + 9, poster);
    server_.scan(Str(buf_, 6), Str(buf_ + 7, 7), done);
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::post_scan(uint32_t poster,
                                         uint32_t start_time, uint32_t end_time,
                                         tamer::preevent<R, scan_result> done) {
    memcpy(buf_, "p|XXXX|XXXX p|XXXX|XXXX", 23);
    write_in_net_order(buf_ + 2, poster);
    write_in_net_order(buf_ + 7, start_time);
    write_in_net_order(buf_ + 14, poster);
    write_in_net_order(buf_ + 19, end_time);
    server_.scan(Str(buf_, 11), Str(buf_ + 12, 11), done);
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::pace(tamer::preevent<R> done) {
    server_.pace(done);
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::stats(tamer::preevent<R, Json> done) {
    server_.stats(done);
}

template <typename S> template <typename R>
inline void TwitterNewShim<S>::control(const Json& cmd, tamer::preevent<R, Json> done) {
    server_.control(cmd, done);
}

template <typename S>
class TwitterNewRunner {
  public:
    TwitterNewRunner(S& server, TwitterNewPopulator& tp);

    tamed void populate(tamer::event<> done);
    tamed void run(tamer::event<> done);

  private:
    S& server_;
    TwitterNewPopulator& tp_;
    uint32_t currtime_;
    uint32_t pending_;
    tamer::event<> trigger_;
    Log log_;

    template <typename R>
    void subscribe(uint32_t s, uint32_t p, uint32_t time, preevent<R> e);
    tamed void check(TwitterUser* user, uint32_t time,
                     uint32_t beg_scan, uint32_t end_scan, event<uint32_t> e);
    tamed void post(uint32_t u, uint32_t time, Str value, event<> e);
    tamed void backfill(uint32_t u, uint32_t f, uint32_t time, event<uint32_t> e);
    tamed void periodic_logger(tamer::event<> done);
};

template <typename S>
inline TwitterNewRunner<S>::TwitterNewRunner(S& server, TwitterNewPopulator& tp)
    : server_(server), tp_(tp), currtime_(BASE_TIME), pending_(0), log_(tstamp()) {
}

template <typename S> template <typename R>
void TwitterNewRunner<S>::subscribe(uint32_t subscriber, uint32_t poster,
                                    uint32_t time, preevent<R> e) {
    if (tp_.log())
        fprintf(stderr, "%d: subscribe s|%08d|%08d\n", time, subscriber, poster);

    // in client push mode we reverse the subscriber key to make followers list
    server_.subscribe((tp_.push()) ? poster : subscriber,
                      (tp_.push()) ? subscriber : poster,
                      e);
}

tamed template <typename S>
void TwitterNewRunner<S>::check(TwitterUser* user, uint32_t time,
                                uint32_t beg_scan, uint32_t end_scan,
                                event<uint32_t> done) {
    tvars {
        typename S::scan_result sr;
    }

    twait {
        server_.timeline_scan(user->uid(), beg_scan, end_scan, make_event(sr));
    }

    if (tp_.log()) {
        fprintf(stderr, "%d: scan [t|%08u|%010u, t|%08u|%010u)\n",
                time, user->uid(), beg_scan, user->uid(), end_scan);

        for (auto it = sr.begin(); it != sr.end(); ++it) {
            assert(it->key().length() == 16);
            assert(it->key()[0] == 't');
            std::cerr << "  t|" << read_in_net_order<uint32_t>(it->key().data() + 2)
                      << "|" << read_in_net_order<uint32_t>(it->key().data() + 7)
                      << "|" << read_in_net_order<uint32_t>(it->key().data() + 12)
                      << ": " << it->value() << "\n";
        }
    }

    // extract timestamp of last post read
    if (sr.size()) {
        typename S::iterator it = sr.begin();
        for (uint32_t i = 0; i < sr.size() - 1; ++i)
            ++it;
        uint32_t last = read_in_net_order<uint32_t>(it->key().data() + 7);
        if (last > user->last_read_)
            user->last_read_ = last;
    }

    user->pending_ = false;
    --pending_;
    trigger_.trigger();

    done(done.result() +  sr.size());
}

tamed template <typename S>
void TwitterNewRunner<S>::post(uint32_t u, uint32_t time, Str value, event<> e) {
    tvars {
        uint32_t s;
        typename S::scan_result sr;
        tamer::gather_rendezvous gr;
    }

    if (tp_.log())
        fprintf(stderr, "%d: post p|%08d|%010d\n", time, u, time);

    server_.post(u, time, value, tp_.is_celebrity(u), gr.make_event());

    if (tp_.push()) {
        server_.follower_scan(u, gr.make_event(sr));
        twait(gr);

        server_.prepare_push_post(u, time, value);

        for (auto it = sr.begin(); it != sr.end(); ++it) {
            s = read_in_net_order<uint32_t>(it->key().data() + 7);
            server_.push_post(s, gr.make_event());
        }
    }

    twait(gr);
    e();
}

tamed template <typename S>
void TwitterNewRunner<S>::backfill(uint32_t u, uint32_t f, uint32_t time, event<uint32_t> e) {
    assert(tp_.push());

    tvars {
        uint32_t ptime;
        typename S::scan_result sr;
        tamer::gather_rendezvous gr;
    }

    server_.post_scan(f, time - LOGIN_WINDOW, END_TIME, gr.make_event(sr));
    twait(gr);

    for (auto it = sr.begin(); it != sr.end(); ++it) {
        ptime = read_in_net_order<uint32_t>(it->key().data() + 7);
        server_.prepare_push_post(f, ptime, it->value());
        server_.push_post(u, gr.make_event());
    }
    twait(gr);

    e(e.result() + sr.size());
}

tamed template <typename S>
void TwitterNewRunner<S>::populate(tamer::event<> done) {
    tvars {
        boost::mt19937 gen;
        uint32_t u, s;
        uint32_t post_end_time = this->currtime_ + this->tp_.popduration();
        std::vector<std::pair<uint32_t, uint32_t>> subs;
        tamer::gather_rendezvous gr;
        Json j;
    }
    gen.seed(112181 + tp_.groupid());

    if (tp_.verbose()) { std::cerr << "Creating social graph." << std::endl; }
    tp_.make_subscriptions(gen, subs);
    if (!tp_.groupid())
        tp_.print_subscription_statistics(std::cerr);

    if (!tp_.groupid())
        twait { server_.control(Json().set("clear_log", true), make_event(j)); }

    // in some experiments we pre-populate the servers using another process
    if (!tp_.populate())
        goto finish;

    if (!tp_.groupid())
        twait { server_.initialize(tp_.push(), tp_.pull(), tp_.pull_celeb(), make_event()); }

    if (tp_.verbose()) { std::cerr << "Building subscription table." << std::endl; }
    for (s = 0; s != subs.size(); ++s) {
        subscribe(subs[s].first, subs[s].second, currtime_, gr.make_event());
        twait { server_.pace(make_event()); }
    }

    for (u = tp_.begin_managed(); u != tp_.end_managed(); ++u)
        if (tp_.is_celebrity(u))
            server_.mark_celebrity(u, gr.make_event());
    twait(gr);

    if (tp_.verbose()) { std::cerr << "Populating twittersphere." << std::endl; }
    while(currtime_ < post_end_time) {
        post(tp_.rand_user_post(gen), currtime_,
             String(TwitterNewPopulator::tweet_data, 5), gr.make_event());
        ++currtime_;

        twait{ server_.pace(make_event()); }
    }
    twait(gr);

    finish:
    currtime_ = post_end_time;
    done();
}

tamed template <typename S>
void TwitterNewRunner<S>::periodic_logger(tamer::event<> done) {
    tvars {
        struct rusage u, lu;
        uint64_t now;
    }
    memset(&lu, 0, sizeof(struct rusage));

    while(done) {
        mandatory_assert(getrusage(RUSAGE_SELF, &u) == 0, "Failed to getrusage.");
        now = tstamp();

        log_.record_at("rss_mb", now, u.ru_maxrss / 1024);
        log_.record_at("utime_us", now, tv2us(u.ru_utime) - tv2us(lu.ru_utime));
        log_.record_at("stime_us", now, tv2us(u.ru_stime) - tv2us(lu.ru_stime));

        lu = u;
        twait volatile { tamer::at_delay_sec(1, make_event()); }
    }
}

tamed template <typename S>
void TwitterNewRunner<S>::run(tamer::event<> done) {
    tvars {
        boost::mt19937 gen;
        boost::uniform_real<> active_rng(0,100);
        struct rusage ru[2];
        struct timeval tv[2];
        uint32_t beg_time = this->currtime_;
        uint32_t end_time = beg_time + this->tp_.duration();
        uint32_t postlimit = this->tp_.postlimit();
        uint32_t u, beg_scan, end_scan, slot;
        uint32_t npost = 0, nbackpost = 0, nsubscribe = 0, nlogout = 0,
                 nlogin = 0, ncheck = 0, nread = 0, nfull = 0;
        std::vector<uint32_t> active;
        std::vector<uint32_t> loggedin;
        TwitterUser* user = NULL;
        typename S::scan_result scan_result;
        Json old_stats, stats, logs;
        tamer::gather_rendezvous gr;
    }

    if (!tp_.execute()) {
        done();
        return;
    }

    gen.seed(13918 + tp_.groupid());
    periodic_logger(done);

    // create a working set of already logged in users
    if (tp_.verbose()) { std::cerr << "Logging in active users." << std::endl; }
    for (u = tp_.begin_managed(); u != tp_.end_managed(); ++u) {
        if (active_rng(gen) >= tp_.pct_active())
            continue;

        user = tp_.managed_user(u);
        ++pending_;

        check(user, currtime_, 0, END_TIME, gr.make_event(nread));
        twait{ server_.pace(make_event()); }

        loggedin.push_back(u);
    }
    twait(gr);
    assert(!pending_);

    if (loggedin.empty() && tp_.pct_active() > 0)
        assert(false && "There were no active users selected.");

    twait { server_.stats(make_event(old_stats)); }

    if (tp_.verbose()) { std::cerr << "Starting workload." << std::endl; }
    getrusage(RUSAGE_SELF, &ru[0]);
    gettimeofday(&tv[0], 0);

    while (currtime_ < end_time && ((postlimit) ? (npost < postlimit) : true)) {
        user = nullptr;

        switch(tp_.rand_op(gen)) {
            case op_post:
                post(tp_.rand_user_post(gen), currtime_,
                     String(TwitterNewPopulator::tweet_data, 5),
                     gr.make_event());

                ++npost;
                break;

            case op_subscribe:
                user = tp_.managed_user(tp_.rand_user_managed(gen));
                uint32_t following;

                do {
                    following = tp_.rand_user_all(gen);
                } while (following == user->uid());

                subscribe(user->uid(), following, currtime_, gr.make_event());
                ++nsubscribe;

                if (tp_.push())
                    backfill(u, following, currtime_, gr.make_event(nbackpost));
                break;

            case op_logout:
                if (loggedin.empty() || (pending_ == loggedin.size()))
                    break;

                do {
                    slot = gen() % loggedin.size();
                    user = tp_.managed_user(loggedin[slot]);
                } while(user->pending_);

                if (tp_.log())
                    fprintf(stderr, "%d: logout %08d\n", currtime_, user->uid());

                active.push_back(user->uid());
                loggedin.erase(loggedin.begin() + slot);
                user->last_read_ = 0;
                ++nlogout;
                break;

            case op_login:
                do_login:
                if (!active.empty()) {
                    slot = gen() % active.size();
                    user = tp_.managed_user(active[slot]);
                    active.erase(active.begin() + slot);

                    if (tp_.log())
                        fprintf(stderr, "%d: login %08d\n", currtime_, user->uid());

                    loggedin.push_back(user->uid());
                    ++nlogin;
                }
                // fall through to check timeline after login

            case op_check:
                if (!user) {
                    do_check:
                    if (!loggedin.empty() && (pending_ < loggedin.size())) {
                        do {
                            user = tp_.managed_user(loggedin[gen() % loggedin.size()]);
                        } while (user->pending_);
                    }
                    else if (!active.empty())
                        goto do_login;
                    else {
                        // wait until there is a loggedin user that is not
                        // already refreshing its timeline
                        twait { trigger_ = make_event(); }
                        goto do_check;
                    }
                }

                beg_scan = user->last_read_;
                end_scan = currtime_ - SKEW;

                if (!beg_scan) {
                    beg_scan = currtime_ - LOGIN_WINDOW;
                    ++nfull;
                }
                else
                    beg_scan -= OVERLAP;

                user->pending_ = true;
                ++pending_;

                check(user, currtime_, beg_scan, end_scan, gr.make_event(nread));

                if (tp_.synchronous())
                    twait(gr);
                else
                    twait { server_.pace(make_event()); }

                ++ncheck;
                break;

            default:
                assert(false && "Unknown operation.");
        }

        ++currtime_;

        if (tp_.verbose()) {
            uint32_t diff = currtime_ - beg_time;
            if (currtime_ > beg_time && diff % (tp_.duration() / 10) == 0)
                std::cerr << diff / (tp_.duration() / 10) * 10 << "% complete" << std::endl;
        }
    }
    twait(gr);

    // do a final scan for every loggedin user. this helps to ensure that
    // each distributed experiment does roughly the same amount of work
    // despite differences in rpc ordering
    if (tp_.verbose()) { std::cerr << "Final scan." << std::endl; }
    for (uint32_t u : loggedin)
        check(tp_.managed_user(u), currtime_,
              user->last_read_, END_TIME, gr.make_event(nread));
    twait(gr);

    getrusage(RUSAGE_SELF, &ru[1]);
    gettimeofday(&tv[1], 0);

    twait { server_.stats(make_event(stats)); }
    twait { server_.control(Json().set("get_log", true), make_event(logs)); }

    if (!stats.is_array()) {
        old_stats = Json::make_array(old_stats);
        stats = Json::make_array(stats);
    }

    uint32_t s = 0;
    for (auto it = stats.abegin(); it != stats.aend(); ++it, ++s)
        if (it->get("server_user_time")) {
            (*it)["server_user_time"] -= old_stats[s]["server_user_time"];
            (*it)["server_system_time"] -= old_stats[s]["server_system_time"];
        }

    stats = Json().set("log", log_.as_json())
                  .set("server_logs", logs)
                  .set("server_stats", stats);

    stats.set("nposts", npost)
         .set("nbackposts", nbackpost)
         .set("nsubscribes", nsubscribe)
         .set("nchecks", ncheck)
         .set("nfull", nfull)
         .set("nposts_read", nread)
         .set("nactive", active.size() + loggedin.size())
         .set("nlogins", nlogin)
         .set("nlogouts", nlogout)
         .set("user_time", to_real(ru[1].ru_utime - ru[0].ru_utime))
         .set("system_time", to_real(ru[1].ru_stime - ru[0].ru_stime))
         .set("real_time", to_real(tv[1] - tv[0]));
    std::cout << stats.unparse(Json::indent_depth(4)) << "\n";

    done();
}

tamed void run_twitter_new_remote(TwitterNewPopulator& tp, int client_port,
                                  const Hosts* hosts, const Partitioner* part);

} // namespace pq
#endif
