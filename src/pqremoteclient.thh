// -*- mode: c++ -*-
#ifndef PEQUOD_REMOTECLIENT_HH
#define PEQUOD_REMOTECLIENT_HH
#include <tamer/tamer.hh>
#include <iterator>
#include "mpfd.hh"
#include "pqrpc.hh"
namespace pq {
using tamer::event;

class RemoteClient {
  public:
    inline RemoteClient(tamer::fd fd);
    inline RemoteClient(msgpack_fd* mpfd);
    inline ~RemoteClient();

    tamed void add_join(const String& first, const String& last,
                        const String& joinspec, event<Json> e);

    tamed void get(const String& key, event<String> e);
    tamed void insert(const String& key, const String& value, event<> e);
    tamed void erase(const String& key, event<> e);

    tamed void insert_db(const String& key, const String& value, event<> e);
    tamed void erase_db(const String& key, event<> e);

    tamed void count(const String& first, const String& last,
                     event<size_t> e);
    tamed void add_count(const String& first, const String& last,
                         event<size_t> e);

    template <typename R>
    inline void pace(tamer::preevent<R> done);

    class iterator;
    class scanpair {
      public:
        scanpair() = default;
        scanpair(const Json* it)
            : it_(it) {
        }
        const String& key() const {
            return it_[0].as_s();
        }
        const String& value() const {
            return it_[1].as_s();
        }
      private:
        const Json* it_;
        friend class iterator;
    };
    class iterator : public std::iterator<std::random_access_iterator_tag, scanpair> {
      public:
        iterator() = default;
        explicit iterator(const Json* it)
            : it_(it) {
        }

        void operator++() {
            it_.it_ += 2;
        }
        void operator--() {
            it_.it_ -= 2;
        }
        size_t operator-(iterator x) const {
            return (it_.it_ - x.it_.it_) / 2;
        }

        bool operator==(iterator x) const {
            return it_.it_ == x.it_.it_;
        }
        bool operator!=(iterator x) const {
            return it_.it_ != x.it_.it_;
        }

        scanpair operator*() const {
            return it_;
        }
        const scanpair* operator->() const {
            return &it_;
        }
      private:
        scanpair it_;
    };
    class scan_result {
      public:
        scan_result() = default;
        inline scan_result(Json&& x)
            : result_(std::move(x)) {
        }
        inline iterator begin() const {
            return iterator(result_.array_data());
        }
        inline iterator end() const {
            return iterator(result_.array_data() + result_.size());
        }
        inline void flush() {
            result_.clear();
        }
        inline size_t size() const {
            return result_.size() / 2;
        }
      private:
        mutable Json result_;
    };
    tamed void scan(const String& first, const String& last,
                    event<scan_result> e);

    tamed void stats(event<Json> e);
    tamed void control(const Json& cmd, event<Json> e);

    inline msgpack_fd* fd() const;

  protected:
    msgpack_fd* fd_;
    unsigned long seq_;
    bool alloc_;
};


inline RemoteClient::RemoteClient(tamer::fd fd)
    : fd_(new msgpack_fd(fd)), seq_(0), alloc_(true) {
}

inline RemoteClient::RemoteClient(msgpack_fd* fd)
    : fd_(fd), seq_(0), alloc_(false) {
}

inline RemoteClient::~RemoteClient() {
    if (alloc_)
        delete fd_;
}

inline msgpack_fd* RemoteClient::fd() const {
    return fd_;
}

template <typename R>
inline void RemoteClient::pace(tamer::preevent<R> done) {
    fd_->pace(done);
}

} // namespace pq
#endif
