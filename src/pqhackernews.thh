#ifndef PQHACKERNEWS_HH
#define PQHACKERNEWS_HH
#include <boost/random.hpp>
#include <utility>
#include <vector>
#include <map>
#include <set>
#include <iostream>
#include <stdint.h>
#include <sys/resource.h>
#include <tamer/tamer.hh>
#include "json.hh"
#include "pqjoin.hh"
#include "json.hh"
#include "time.hh"
#include "sp_key.hh"
#include "hnpopulator.hh"
#include "hnshim.hh"
#include "pqremoteclient.hh"

namespace pq {
using tamer::event;
using tamer::preevent;

template <typename S>
class HackernewsRunner {
  public:
    HackernewsRunner(S& server, HackernewsPopulator& hp);
    tamed void populate(event<> e);
    tamed void run(event<> e);

  private:
    tamed void post_article(uint32_t author, uint32_t aid, event<> e);
    tamed void post_comment(uint32_t commentor, uint32_t aid, event<> e);
    tamed void vote(uint32_t voter, uint32_t aid, event<> e);
    tamed void read_article(uint32_t aid, event<> e);

    S& server_;
    HackernewsPopulator& hp_;
};

template <typename S>
inline HackernewsRunner<S>::HackernewsRunner(S& server, HackernewsPopulator& hp)
    : server_(server), hp_(hp) {
}

tamed template <typename S>
void HackernewsRunner<S>::post_article(uint32_t author, uint32_t aid, event<> e) {
    hp_.post_article(author, aid);
    twait {
        server_.post_article(author, aid, Str("lalalalaxx", 10), hp_.karmas(), e);
    }
}

tamed template <typename S>
void HackernewsRunner<S>::post_comment(uint32_t commentor, uint32_t aid, event<> e) {
    twait {
        server_.post_comment(commentor, hp_.articles()[aid], aid, hp_.next_comment(),
                             Str("calalalaxx", 10), e);
    }
}

tamed template <typename S>
    void HackernewsRunner<S>::vote(uint32_t voter, uint32_t aid, event<> e) {
    twait {
        server_.vote(voter, hp_.articles()[aid], aid, hp_.karmas(), e);
    }
}

tamed template <typename S>
    void HackernewsRunner<S>::read_article(uint32_t aid, event<> e) {
    mandatory_assert(aid < hp_.narticles());
    twait {
        server_.read_article(aid, hp_.articles()[aid], hp_.karmas(), hp_.check_karma(), e);
    }
}

tamed template <typename S>
void HackernewsRunner<S>::populate(event<> e) {
    tvars {
        boost::mt19937 gen;
        boost::random_number_generator<boost::mt19937> rng(gen);
        uint32_t nv = 0, nc = 0, j = 0, i = 0;
        uint32_t author, ncomment, nvote, voter, aid, commentor;
    }
    twait { server_.initialize(hp_.log(), hp_.mk(), hp_.ma(), hp_.push(), tamer::event<>()); }

    if (hp_.run_only()) {
        printf("Not populating datastore\n");
        hp_.set_defaults();
        twait { server_.post_populate(make_event()); }
        e();
        return;
    }

    // Populate datastore
    if (hp_.pg()) {
        hp_.fill_db();
        if (!hp_.populate_only())
            hp_.populate_from_files(&nv, &nc);
    } else {
        gen.seed(13918);
        for (aid = 0; aid < hp_.pre(); aid++) {
            author = rng(hp_.nusers());
            twait { post_article(author, aid, make_event()); }
            ncomment = rng(20);
            for (j = 1; j <= ncomment; ++j) {
                nc++;
                commentor = rng(hp_.nusers());
                twait { post_comment(commentor, aid, make_event()); }
            }
            nvote = rng(50);
            for (j = 0; j < nvote; ++j) {
                voter = rng(hp_.nusers());
                if (hp_.vote(aid, voter)) {
                    ++nv;
                    twait { vote(voter, aid, make_event()); }
                }
            }
        }
    }

    if (hp_.log() && hp_.check_karma()) {
        std::cout << ": my karma table:\n";
        for (i = 0; i < hp_.nusers(); i++)
            std::cout << " k " << i << ": " << hp_.karma(i) << "\n";
        std::cout << ": end my karma table\n";
    }

    twait { server_.post_populate(make_event()); }
    std::cout << "Added " << hp_.nusers() << " users, " << hp_.narticles() 
              << " articles, " << nv << " votes, " << nc << " comments." << std::endl;
    e();
}

tamed template <typename S>
void HackernewsRunner<S>::run(event<> e) {
    tvars {
        boost::mt19937 gen;
        boost::random_number_generator<boost::mt19937> rng(gen);
        const uint32_t nops = this->hp_.nops();
        const uint32_t nusers = this->hp_.nusers();
        struct rusage ru[2];
        uint32_t nread = 0, npost = 0, ncomment = 0, nvote = 0;
        Json old_stats, stats;
        double start;
        uint32_t i, p, user, aid;
    }
    if (hp_.populate_only()) {
        e();
        return;
    }
    gen.seed(13918);
    twait { server_.stats(make_event(old_stats)); }
    getrusage(RUSAGE_SELF, &ru[0]);
    twait { start = tstamp(); }
    printf("Starting\n");
    for (i = 0; i < nops; ++i) {
        printf("i %d\n", i);
        p = rng(100);
        user = rng(nusers);
        if (p < hp_.post_rate()) {
            twait { post_article(user, hp_.next_aid(), make_event()); }
            npost++;
        } else {
            aid = rng(hp_.narticles());
            printf("Reading %d\n", aid);
            twait { read_article(aid, make_event()); }
            nread++;
            if (p < hp_.vote_rate() && hp_.vote(aid, user)) {
                twait { vote(user, aid, make_event()); }
                ++nvote;
            }
            if (p < hp_.comment_rate()) {
                twait { post_comment(user, aid, make_event()); }
                ncomment++;
            }
        }
    }
    getrusage(RUSAGE_SELF, &ru[1]);
    twait {
        server_.stats(make_event(stats));
    }
    if (stats.get("server_user_time")) {
        stats["server_user_time"] -= old_stats["server_user_time"];
        stats["server_system_time"] -= old_stats["server_system_time"];
    }
    stats = Json().set("nread", nread).set("npost", npost)
	.set("ncomment", ncomment).set("nvote", nvote)
	.set("time", to_real(ru[1].ru_utime - ru[0].ru_utime)).merge(stats);
    std::cout << stats.unparse(Json::indent_depth(4)) << "\n";
    double tm = (tstamp() - start) / 1000000;
    std::cout << nops << " done, " << tm << " seconds, " << nops/tm << " qps\n";
    e();
}

tamed void run_hn_remote(HackernewsPopulator& hp, int client_port) {
    tvars {
        tamer::fd fd;
        RemoteClient* rc;
        PQHackerNewsShim<RemoteClient>* shim;
        HackernewsRunner<PQHackerNewsShim<RemoteClient> >* hr;
    }
    std::cerr << "connecting to port " << client_port << "\n";
    twait { tamer::tcp_connect(in_addr{htonl(INADDR_LOOPBACK)}, client_port, make_event(fd)); }
    if (!fd) {
        std::cerr << "port " << client_port << ": "
                  << strerror(-fd.error()) << "\n";
        exit(1);
    }
    rc = new RemoteClient(fd);
    shim = new PQHackerNewsShim<RemoteClient>(*rc);
    hr = new HackernewsRunner<PQHackerNewsShim<RemoteClient> >(*shim, hp);
    //    twait { hr->populate(make_event()); }
    //    twait { hr->run(make_event()); }

    twait { hr->populate(make_event()); }
    twait { hr->run(make_event()); }
    delete hr;
    delete shim;
    delete rc;
}


};

#endif
