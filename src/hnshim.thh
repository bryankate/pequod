#ifndef HN_CLIENT_HH
#define HN_CLIENT_HH
#include "check.hh"
#include <tamer/tamer.hh>

namespace pq {

typedef const std::vector<uint32_t> karmas_type;
using tamer::make_event;
using tamer::event;
using tamer::preevent;

template <typename C>
class HashHackerNewsShim {
  public:
    HashHackerNewsShim(C &c) : c_(c) {
    }

    void initialize(bool, bool mk, bool ma, bool, event<> e) {
        mandatory_assert(mk && !ma, "unimplemented: materializing all");
        e();
    }

    void post_populate(event<> e) { (void)e; }

    void post_article(uint32_t author, uint32_t aid, const String &v, karmas_type& check_karmas, event<> e) {
        // add a|aid/author|v
        (void) check_karmas;
        c_.set(String("a|") + String(aid), String(author) + String("|") + v, e);
        // XXX: append aid to ah|author?
    }

    tamed void post_comment(uint32_t commentor, uint32_t author, uint32_t aid,
                      uint32_t cid, const String &v, event<> e);
    tamed void vote(uint32_t voter, uint32_t author, uint32_t aid, karmas_type& check_karmas, event<> e);
    tamed void read_article(uint32_t aid, uint32_t author, karmas_type &check_karmas, bool check, 
                      event<> e);
    template <typename R>
    void stats(preevent<R, Json> e) {
        e(Json());
    }
    
    void pace(event<> e) { e(); }

  private:
    C& c_;
};

tamed template <typename S>
void HashHackerNewsShim<S>::vote(uint32_t voter, uint32_t author, uint32_t aid, karmas_type& check_karmas, event<> e) {
    // append voter to v|aid?
    (void) check_karmas;
    twait {
        c_.append(String("v|") + String(aid), String(voter) + String(","), make_event());
        // increment k|author
        c_.increment(String("k|") + String(author), make_event());
    }
    e();
}

tamed template <typename S>
inline void HashHackerNewsShim<S>::post_comment(uint32_t commentor, uint32_t author, uint32_t aid,
                      uint32_t cid, const String &v, event<> e) {
    (void)author;
    twait {
        // add c|cid/v
        c_.set(String("c|") + String(cid), v, make_event());
        // append commentor|cid to ac|aid
        char buf[128];
        sprintf(buf, "%d|%d\255", commentor, aid);
        c_.append(String("ac|") + String(aid), Str(buf, strlen(buf)), make_event());
    }
    e();
}

tamed template <typename S>
inline void HashHackerNewsShim<S>::read_article(uint32_t aid, uint32_t author, 
        karmas_type &check_karmas, bool check, event<> e) {
    tvars {
        String hv, cl;
        std::list<String> str;
    }
    (void)author;
    (void)check_karmas;
    (void)check;
    twait { 
        // get a|aid/hv
        c_.get(String("a|") + String(aid), 0, make_event(hv));
        // get ac|aid/clist
        c_.get(String("ac|") + String(aid), 0, make_event(cl)); 
    }
    // for each commentor/cid in cl:
    twait {
        ssize_t ep;
        for (ssize_t s = 0; (ep = cl.find_left('\255', s)) != -1; s = ep + 1) {
            ssize_t p = cl.find_left('|', s);
            mandatory_assert(p != -1);
            Str commentor(cl.data() + s, cl.data() + p);
            Str cid(cl.data() + p + 1, cl.data() + ep);
            // get c|cid/cv
            str.push_back(String());
            c_.get(String("c|") + cid, 0, make_event(str.back()));
            // get k|commentor/kc
            str.push_back(String());
            c_.get(String("k|") + commentor, 0, make_event(str.back()));
        }
    }
    c_.done_get(hv);
    c_.done_get(cl);
    for (auto& v : str)
        c_.done_get(v);
    e();
}

template <typename S>
class PQHackerNewsShim {
  public:
    PQHackerNewsShim(S& server) : server_(server) { }

    tamed void initialize(bool log, bool mk, bool ma, bool push, tamer::event<> e);
    tamed void post_populate(event<> e);

    void post_comment(uint32_t commentor, uint32_t author, uint32_t aid, uint32_t cid,
                      const String &v, event<> e) {
        char buf[128];
        sprintf(buf, "c|%07d%07d|%07d|%07d", author, aid, cid, commentor);
        if (log_)
            printf("comment  %.32s\n", buf);
        server_.insert(Str(buf, 32), v, e);
    }

    tamed void post_article(uint32_t author, uint32_t aid, const String &v, karmas_type& check_karmas, event<> e);
    tamed void vote(uint32_t voter, uint32_t author, uint32_t aid, karmas_type& check_karmas, event<> e);
    tamed void read_article(uint32_t aid, uint32_t author, karmas_type& check_karmas, bool check, event<> e);

    template <typename R>
    void stats(preevent<R, Json> e) {
        server_.stats(e);
    }

    template <typename R>
    void pace(preevent<R> e) {
        server_.pace(e);
    }

    int total_comments;
    int total_articles;

  private:
    tamed void get_karma(String user, karmas_type& check_karmas, bool check, event<> e);

    bool log_;
    bool mk_;
    bool ma_;
    bool push_;
    S& server_;
    char buf1_[128];
    char buf2_[128];
};

tamed template <typename S>
void PQHackerNewsShim<S>::initialize(bool log, bool mk, bool ma, bool push, tamer::event<> e) {
    tvars {
        String start, end, join_str;
        bool valid;
        Json j[4];
    }
    this->log_ = log;
    this->mk_ = mk;
    this->ma_ = ma;
    this->push_ = push;

    if (push) {
        e();
        return;
        // dont' set up any joins, client will take care of it.
    }

    if (mk) {
        // Materialize karma in a separate table
        printf("Materializing karma table\n");
        join_str = "k|<author:7> = "
            "count v|<author><seqid:7>|<voter:7>";
        start = "k|";
        end = "k}";
        twait { this->server_.add_join(start, end, join_str, make_event(j[0])); }
    }
    if (ma) {
        // Materialize all articles
        printf("Materializing all article pages\n");
        printf("Articles\n");
        start = "ma|";
        end = "ma}";
        // Materialize articles
        join_str = "ma|<author:7><seqid:7>|a = "
            "a|<author><seqid> ";
        twait { this->server_.add_join(start, end, join_str, make_event(j[0])); }

        printf("Votes\n");
        // Materialize votes
        join_str = "ma|<author:7><seqid:7>|v = "
            "count v|<author><seqid>|<voter:7> ";
        twait { this->server_.add_join(start, end, join_str, make_event(j[1])); } 

        printf("Comments\n");
        // Materialize comments
        join_str = "ma|<author:7><seqid:7>|c|<cid:7>|<commenter:7> = "
            "c|<author><seqid>|<cid>|<commenter> ";
        twait { this->server_.add_join(start, end, join_str, make_event(j[2])); }

    } 
    if (ma && !mk) {
        printf("Materialize karma inline\n");
        mandatory_assert(false && "This is producing irregular counts");
        join_str = "ma|<aid:14>|k|<cid:7>|<commenter:7> = "
            "using c|<aid>|<cid>|<commenter> "
            "count v|<commenter><seq:7>|<voter:7>";
        twait { this->server_.add_join(start, end, join_str, make_event(j[3])); }
    }
    if (ma && mk) {
        printf("Materialize karma inline from karma table\n");
        join_str = "ma|<aid:14>|k|<cid:7>|<commenter:7> = "
            "using c|<aid>|<cid>|<commenter> "
            "copy k|<commenter>";
        twait { this->server_.add_join(start, end, join_str, make_event(j[3])); }
    }
    for (int i =0; i < 4; i++) {
        std::cout << j[i] << "\n";
    }
    e();
}

tamed template <typename S>
void PQHackerNewsShim<S>::post_populate(event<> e) {
    tvars { 
        typename S::scan_result scan_result; 
        String start, end;
        typename S::iterator bit;
    }
    if (!push_ && mk_) {
        start = "k|";
        end = "k}";
        twait { server_.scan(start, end, make_event(scan_result)); }
        if (log_) {
            std::cout << ": print validated karma range [" << start << "," << end << ")\n";
            for (bit = scan_result.begin(); bit != scan_result.end(); ++bit)
                std::cout << "  " << bit->key() << ": " << bit->value() << "\n";
            std::cout << ": end print validated [" << start << "," << end << ")\n";
            std::cout << "Finished validate.\n";
        }
    } else if (!push_ && ma_) {
        start = "ma|";
        end = "ma}";
        twait { server_.scan(start, end, make_event(scan_result)); }
        if (log_) {
            std::cout << ": print validated ma range [" << start << "," << end << ")\n";
            for (bit = scan_result.begin(); bit != scan_result.end(); ++bit)
                std::cout << "  " << bit->key() << ": " << bit->value() << "\n";
            std::cout << ": end print validated [" << start << "," << end << ")\n";
            std::cout << "Finished validate.\n";
        }
    }
    e();
}

tamed template <typename S>
void PQHackerNewsShim<S>::read_article(uint32_t aid, uint32_t author,
                                       karmas_type& check_karmas, bool check, event<> e) {
    tvars {
        typename S::scan_result scan_resultma, scan_resultc;
        String field, user, avalue, kvalue;
        uint32_t my_karma, karma;
        size_t votect;
        typename S::iterator bit, cit;
        tamer::gather_rendezvous gr;
    }
    if (log_) 
        printf("Reading article %d\n", aid);
    if (ma_) {
        sprintf(buf1_, "ma|%07d%07d|", author, aid);
        sprintf(buf2_, "ma|%07d%07d}", author, aid);
        twait { server_.scan(buf1_, buf2_, make_event(scan_resultma)); }
        bit = scan_resultma.begin();
        for (; bit != scan_resultma.end(); ++bit) {
            field = extract_spkey(2, bit->key());
            if (log_) {
                if (field == "a")
                    std::cout << "read " << bit->key() << ": " << bit->value() << "\n";
                else
                    std::cout << "  " << field << " " << bit->key() << ": " << bit->value() << "\n";
            }
            if (field == "k" && check) {
                user = extract_spkey(4, bit->key());
                my_karma = check_karmas[user.to_i()];
                karma = bit->value().to_i();
                if (karma != my_karma)
                    printf("Karma problem. mine: %d db's: %d user: %s\n", my_karma, karma, user.c_str());
                mandatory_assert(karma == my_karma && "Karma mismatch");
            }
        }
        e();
    } else {
        // Article
        sprintf(buf1_, "a|%07d%07d", author, aid);
        twait { server_.get(Str(buf1_, 16), make_event(avalue)); }
        if (log_)
            std::cout << "read " << Str(buf1_, 16) << ":" << avalue << "\n";
        this->total_articles++;
        // Comments and Karma
        sprintf(buf1_, "c|%07d%07d|", author, aid);
        sprintf(buf2_, "c|%07d%07d}", author, aid);
        twait { server_.scan(buf1_, buf2_, make_event(scan_resultc)); }
        for (bit = scan_resultc.begin(); bit != scan_resultc.end(); ++bit) {
            this->total_comments++;
            if (log_)
                std::cout << "  c " << bit->key() << ": " << bit->value() << "\n";
            String user = extract_spkey(3, bit->key());
            if (mk_ || push_) {
                sprintf(buf1_, "k|%s", user.c_str());
                // XXX: implement get(String, tamer::event<String, String>) where
                // the second parameter of event is the value to check against
                server_.get(Str(buf1_, 9), gr.make_event(kvalue));
            } else
                get_karma(user, check_karmas, check, gr.make_event());
        }
        scan_resultc.flush();
        twait(gr);
        // Votes
        sprintf(buf1_, "v|%07d%07d|", author, aid);
        sprintf(buf2_, "v|%07d%07d}", author, aid);
        twait { server_.count(buf1_, buf2_, make_event(votect)); }
        if (log_)
            std::cout << "  v " << votect << "\n";
        e();
    }
}

tamed template <typename S>
void PQHackerNewsShim<S>::get_karma(String user, karmas_type& check_karmas, bool check, event<> e) {
    tvars {
        String value;
        uint32_t karma;
        uint32_t karmact, local_karma;
        typename S::scan_result scan_result;
        typename S::iterator bit, cit;
        String full_aid;
        size_t votect;
    }
    karma = 0;
    sprintf(buf1_, "a|%s0", user.c_str());
    sprintf(buf2_, "a|%s}", user.c_str());
    twait { server_.scan(buf1_, buf2_, make_event(scan_result)); }
    for (bit = scan_result.begin(); bit != scan_result.end(); ++bit) {
        if (log_)
            std::cout << "    a " << bit->key() << ": " << bit->value() << "\n";
        full_aid = extract_spkey(1, bit->key());
        sprintf(buf1_, "v|%s|", full_aid.c_str());
        sprintf(buf2_, "v|%s}", full_aid.c_str());
        twait { server_.count(buf1_, buf2_, make_event(votect)); }
        karma+=votect;
        if (log_)
            std::cout << "      v " << full_aid << ":" << votect << "\n";
        votect = 0;
    }
    if (check)
        CHECK_EQ(karma, local_karma);
    if (log_)
        std::cout << "  k " << user << ": " << karma << "\n";
    e();
}

tamed template <typename S>
void PQHackerNewsShim<S>::post_article(uint32_t author, uint32_t aid, const String &v, 
                                       karmas_type& check_karmas, event<> e) {
    sprintf(buf1_, "a|%07d%07d", author, aid);
    if (log_)
        printf("post %.16s\n", buf1_);
    twait { server_.insert(Str(buf1_, 16), v, e); }

    sprintf(buf1_, "v|%07d%07d|%07d", author, aid, author);
    if (log_)
        printf("vote %.24s\n", buf1_);
    twait { server_.insert(Str(buf1_, 24), Str("1", 1), e); }
    if (push_) {
        sprintf(buf1_, "k|%07d", author);
        // XXX: check_karmas is empty if we are in run_only mode!
        sprintf(buf2_, "%07d", check_karmas[author]);
        if (log_)
            printf("updated karma %.9s %.7s\n", buf1_, buf2_);
        twait { server_.insert(Str(buf1_, 9), Str(buf2_, 7), e); }
    }
    e();
}

tamed template <typename S>
void PQHackerNewsShim<S>::vote(uint32_t voter, uint32_t author, uint32_t aid, 
                               karmas_type& check_karmas, event<> e) {
    sprintf(buf1_, "v|%07d%07d|%07d", author, aid, voter);
    if (log_)
        printf("vote %.24s\n", buf1_);
    twait { server_.insert(Str(buf1_, 24), Str("", 0), make_event()); }
    if (push_) {
        sprintf(buf1_, "k|%07d", author);
        // XXX: check_karmas is empty if we are in run_only mode!
        sprintf(buf2_, "%07d", check_karmas[author]);
        if (log_)
            printf("updated karma %.9s %.7s\n", buf1_, buf2_);
        twait { server_.insert(Str(buf1_, 9), Str(buf2_, 7), make_event()); }
    }
    e();
}


#if HAVE_POSTGRESQL_LIBPQ_FE_H
#include <postgresql/libpq-fe.h>
template <typename C>
class SQLHackernewsShim {
  public:
    SQLHackernewsShim(C& pg) : pg_(pg) {
    }

    void initialize(bool log, bool mk, bool, bool push, event<> e) {
        mandatory_assert((mk || push) && "DB without materialized karma table is too slow. You don't want to run this");
        mk_ = mk;
        log_ = log;
        push_ = push;
        e();
    }

    void post_populate(event<> e) {
        char buf[1024];
        if (push_) {
            sprintf(buf, "SELECT articles.aid,articles.author,articles.link,"
                    "comments.cid,comments.commenter,comments.comment,"
                    "karma.karma,count(votes.aid) as vote_count "
                    "FROM articles "
                    "LEFT OUTER JOIN comments ON articles.aid=comments.aid "
                    "LEFT OUTER JOIN karma ON comments.commenter=karma.author "
                    "JOIN votes ON articles.aid=votes.aid "
                    "WHERE articles.aid = $1::int4 "
                    "GROUP BY articles.aid,comments.cid,karma.karma");
        } else if (mk_) {
            // Materialized karma table, query it
            sprintf(buf, "SELECT articles.aid,articles.author,articles.link,"
                                 "comments.cid,comments.commenter,comments.comment,"
                                 "karma_mv.karma,count(votes.aid) as vote_count "
                         "FROM articles "
                         "LEFT OUTER JOIN comments ON articles.aid=comments.aid "
                         "LEFT OUTER JOIN karma_mv ON comments.commenter=karma_mv.author "
                         "JOIN votes ON articles.aid=votes.aid "
                         "WHERE articles.aid = $1::int4 "
                    "GROUP BY articles.aid,comments.cid,karma_mv.karma");
        } else {
            // No karma_mv
            sprintf(buf, "SELECT articles.aid,articles.author,articles.link,"
                                 "comments.cid,comments.commenter,comments.comment,"
                                 "karma.karma,count(votes.aid) as vote_count "
                         "FROM articles "
                         "LEFT JOIN comments ON articles.aid=comments.aid "
                         "LEFT JOIN "
                           "(SELECT articles.author, count(*) as karma FROM articles, votes WHERE "
                           "articles.aid = votes.aid GROUP BY articles.author) AS karma "
                           "ON comments.commenter=karma.author "
                         "JOIN votes ON articles.aid=votes.aid "
                         "WHERE articles.aid = $1::int4 "
                    "GROUP BY articles.aid,comments.cid,karma.karma");
        }
        pg_.prepare("page", buf, 1);
        e();
    }

    void post_article(uint32_t author, uint32_t aid, const String &v, karmas_type& check_karmas, event<> e) {
        char buf[128];
        (void) check_karmas;
        sprintf(buf, "INSERT INTO articles(author, link) VALUES (%d, '%s')", author, v.data());
        pg_.insert(buf);
        if (log_)
            printf("post %07d\n", aid);
        sprintf(buf, "INSERT INTO votes VALUES (%d, %d)", aid, author);
        pg_.insert(buf);
        if (log_)
            printf("vote\n");
        if (push_) {
            sprintf(buf, "UPDATE karma SET karma = karma+1 WHERE author=%d", author);
            pg_.insert(buf);
            if (log_)
                printf("updated karma\n");
        }
        e();
    }


    void post_comment(uint32_t commentor, uint32_t author, uint32_t aid, uint32_t cid,
                      const String &v, event<> e) {
        (void)author;
        (void)cid;
        char buf[128];
        if (log_)
            printf("about to comment  %d %d\n", aid, commentor);
        sprintf(buf, "INSERT INTO comments(aid, commenter, comment) VALUES (%d, %d, '%s')", aid, commentor, v.data());
        pg_.insert(buf);
        if (log_)
            printf("comment  %d %d\n", aid, commentor);
        e();
    }


    void vote(uint32_t voter, uint32_t author, uint32_t aid, karmas_type& check_karmas, event<> e) {
        char buf[128];
        (void) check_karmas;
        sprintf(buf, "INSERT INTO votes(aid, voter) values (%d, %d)", aid, voter);
        PGresult* res = pg_.insert(buf);
        int affected = atoi(PQcmdTuples(res));
        mandatory_assert(affected == 1);
        if (log_)
            printf("vote %d %d authored by %d\n", aid, voter, author);
        if (push_) {
            sprintf(buf, "UPDATE karma SET karma = karma+1 WHERE author=%d", author);
            pg_.insert(buf);
            if (log_)
                printf("updated karma\n");
        }
        e();
    }

    void read_article(uint32_t aid, uint32_t author, karmas_type& check_karmas, bool check, event<> e) {
        (void)author;
        if (log_) 
            printf("Reading article %d\n", aid);
        uint32_t params[1];
        params[0] = aid;
        PGresult* res = pg_.executePrepared("page", 1, params);
        if (log_) {
            printf("aid\tauthor\tlink\t\tcid\tuser\tcomment\tkarma\tvotes\n");
            for (int i = 0; i < PQntuples(res); i++) {
                for (int j = 0; j < PQnfields(res); j++) {
                    if (PQgetisnull(res, i, j)) {
                        std::cout << "-\t";
                        continue;
                    }
                    char* iptr = PQgetvalue(res, i, j);
                    if (j < 2 || (j > 2 && j < 5)) {
                        int ival = ntohl(*((uint32_t *) iptr));
                        std::cout << ival << "\t";
                    } else if (j > 5) {
                        iptr = &(iptr[4]);
                        int ival = ntohl(*((uint32_t *) iptr));
                        std::cout << ival << "\t";
                    } else {
                        std::cout << iptr << "\t";
                    }
                }
                std::cout << "\n";
            }
        }

        // Check karma
        if (check) {
            for (int i = 0; i < PQntuples(res); i++) {
                if (PQgetisnull(res, i, 4))
                    continue;
                char* kptr = PQgetvalue(res, i, 6);
                kptr = &(kptr[4]);
                uint32_t karma = ntohl(*((uint32_t *) kptr));
                char* uptr = PQgetvalue(res, i, 4);
                uint32_t user = ntohl(*((uint32_t *) uptr));
                uint32_t my_karma = check_karmas[user];
                if (karma > my_karma + 2 || my_karma > karma + 2) {
                    printf("Karma problem. mine: %d db's: %d user: %d\n", my_karma, karma, user);
                    mandatory_assert(false && "Karma mismatch");
                }
            }
        }
        pg_.done(res);
        e();
    }
    template <typename R>
    void stats(preevent<R, Json> e) {
        e(Json());
    }

    void pace(event<> e) { e(); }

  private:
    C& pg_;
    bool log_;
    bool mk_;
    bool push_;
};

#endif

};

#endif
