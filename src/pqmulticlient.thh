#ifndef PQMULTICLIENT_HH_
#define PQMULTICLIENT_HH_

#include "pqremoteclient.hh"
#include "hosts.hh"
#include "partitions.hh"
#include "sock_helper.hh"
#include <vector>
#include <iostream>
#include <tamer/tamer.hh>

namespace pq {

class MultiClient {
  public:
    MultiClient(const Hosts* hosts, const Partitioner* part,
               int colocateCacheServer);
    ~MultiClient();

    tamed void connect(tamer::event<> done);
    tamed void restart(tamer::event<> done);
    inline void clear();

    typedef RemoteClient::scan_result scan_result;

    tamed void add_join(const String& first, const String& last,
                        const String& joinspec, event<Json> e);

    tamed void get(const String& key, event<String> e);
    tamed void insert(const String& key, const String& value, event<> e);
    tamed void erase(const String& key, event<> e);

    tamed void count(const String& first, const String& last,
                     event<size_t> e);
    tamed void add_count(const String& first, const String& last,
                         event<size_t> e);
    tamed void scan(const String& first, const String& last,
                    event<scan_result> e);

    tamed void stats(event<Json> e);
    tamed void pace(tamer::event<> done);

  private:
    inline RemoteClient* backend_for(const String &key) const;
    inline RemoteClient* cache_for(const String &key) const;

    const Hosts* hosts_;
    const Partitioner* part_;
    std::vector<RemoteClient* > clients_;
    RemoteClient* localNode_;
    int colocateCacheServer_;
};


MultiClient::MultiClient(const Hosts* hosts, const Partitioner* part, int colocateCacheServer)
    : hosts_(hosts), part_(part), localNode_(nullptr),
      colocateCacheServer_(colocateCacheServer) {
}

MultiClient::~MultiClient() {
    clear();
}

tamed void MultiClient::connect(tamer::event<> done) {
    tvars {
        tamer::fd fd;
        struct sockaddr_in sin;
        const Host* h;
        int32_t i;
    }

    // for backward compatibility, allow connection to a single server.
    // in this case we interpret the colocated server to be a port number
    if (!hosts_ && !part_ && colocateCacheServer_ > 0) {
        twait { tamer::tcp_connect(in_addr{htonl(INADDR_LOOPBACK)},
                                   colocateCacheServer_, make_event(fd)); }
        localNode_ = new RemoteClient(fd);
    }
    else {
        for (i = 0; i < hosts_->size(); ++i) {
            h = hosts_->get_by_seqid(i);
            sock_helper::make_sockaddr(h->name().c_str(), h->port(), sin);
            twait { tamer::tcp_connect(sin.sin_addr, h->port(), make_event(fd)); }
            if (!fd) {
                std::cerr << "connection error ("
                          << h->name() << ":" << h->port() << "): "
                          << strerror(-fd.error()) << std::endl;
                exit(1);
            }

            clients_.push_back(new RemoteClient(fd));
        }

        if (colocateCacheServer_ >= 0) {
            mandatory_assert(colocateCacheServer_ < hosts_->size());
            localNode_ = clients_[colocateCacheServer_];
        }
    }

    done();
}

tamed void MultiClient::restart(tamer::event<> done) {
    clear();
    twait { connect(make_event()); }
    done();
}

inline void MultiClient::clear() {
    for (auto &c : clients_)
        delete c;
    clients_.clear();
    localNode_ = nullptr;
}

tamed void MultiClient::add_join(const String& first, const String& last,
                                 const String& joinspec, event<Json> e) {
    cache_for(first)->add_join(first, last, joinspec, e);
}

tamed void MultiClient::get(const String& key, event<String> e) {
    cache_for(key)->get(key, e);
}

tamed void MultiClient::insert(const String& key, const String& value, event<> e) {
    cache_for(key)->insert(key, value, e);
}

tamed void MultiClient::erase(const String& key, event<> e) {
    cache_for(key)->erase(key, e);
}

tamed void MultiClient::count(const String& first, const String& last,
                              event<size_t> e) {
    cache_for(first)->count(first, last, e);
}

tamed void MultiClient::add_count(const String& first, const String& last,
                                  event<size_t> e) {
    cache_for(first)->add_count(first, last, e);
}

tamed void MultiClient::scan(const String& first, const String& last,
                event<scan_result> e) {
    cache_for(first)->scan(first, last, e);
}

tamed void MultiClient::stats(event<Json> e) {
    if (localNode_)
        localNode_->stats(e);
    else
        e(Json()); // todo: fix this
}

tamed void MultiClient::pace(tamer::event<> done) {
    tvars {
        tamer::gather_rendezvous gr;
    }

    for (auto& r : clients_)
        r->pace(gr.make_event());

    twait(gr);
    done();
}

inline RemoteClient* MultiClient::backend_for(const String &key) const {
    return clients_[part_->owner(key)];
}

inline RemoteClient* MultiClient::cache_for(const String &key) const {
    if (colocateCacheServer_ >= 0)
        return localNode_;
    else
        return clients_[part_->owner(key)];
}

}

#endif
