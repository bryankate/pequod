#ifndef PQDBPOOL_HH_
#define PQDBPOOL_HH_

#include "string.hh"
#include "json.hh"
#include <queue>
#include <vector>
#include <tamer/tamer.hh>
#if HAVE_POSTGRESQL_LIBPQ_FE_H
#include <postgresql/libpq-fe.h>
#elif HAVE_LIBPQ_FE_H
#include <libpq-fe.h>
#endif

namespace pq {

class DBPool {

  public:
    DBPool(const String& host, uint32_t port);
    DBPool(const String& host, uint32_t port, uint32_t min, uint32_t max);
    ~DBPool();

    void connect();
    void clear();

    tamed void execute(String query, tamer::event<Json> e);
    tamed void add_prepared_pool(std::vector<String> statements, tamer::event<> e);

  private:
    String host_;
    uint32_t port_;
    uint32_t min_;
    uint32_t max_;
#if HAVE_LIBPQ
    std::vector<PGconn*> conn_;
    std::queue<PGconn*> pool_;
    std::queue<tamer::event<PGconn*>> waiting_;

    void next_connection(tamer::event<PGconn*> e);
    void replace_connection(PGconn* conn);
    PGconn* connect_one();
    void execute(PGconn* existing_conn, String query, tamer::event<Json> e);
    tamed void do_execute(PGconn* conn);
    uint64_t first_insert;
    std::deque<String> query_buffer;
    std::deque<tamer::event<Json>> event_buffer;
#endif
};

}

#endif
