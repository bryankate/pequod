#ifndef PQDBPOOL_HH_
#define PQDBPOOL_HH_

#include "string.hh"
#include "json.hh"
#include "time.hh"
#include <queue>
#include <vector>
#include <tamer/tamer.hh>
#if HAVE_POSTGRESQL_LIBPQ_FE_H
#include <postgresql/libpq-fe.h>
#elif HAVE_LIBPQ_FE_H
#include <libpq-fe.h>
#endif

namespace pq {

struct DBPoolParams {
    DBPoolParams();

    String dbname;
    String host;
    uint32_t port;
    uint32_t min;
    uint32_t max;
    uint32_t pipeline_depth;
    uint32_t pipeline_timeout;
};

class DBPool {

  public:
    DBPool(const String& host, uint32_t port);
    DBPool(const DBPoolParams& params);
    ~DBPool();

    void connect();
    void clear();

    tamed void execute(Str query, tamer::event<Json> e);
    tamed void add_prepared(const std::vector<String>& statements, tamer::event<> e);

    inline void maybe_flush();
    tamed void flush();

  private:
    typedef std::vector<String> query_pipe_t;
    typedef std::vector<tamer::event<Json>> event_pipe_t;

    DBPoolParams params_;
    query_pipe_t query_buffer_;
    event_pipe_t event_buffer_;
    uint64_t oldest_;

#if HAVE_LIBPQ
    std::vector<PGconn*> conn_;
    std::queue<PGconn*> pool_;
    std::queue<tamer::event<PGconn*>> waiting_;

    void next_connection(tamer::event<PGconn*> e);
    void replace_connection(PGconn* conn);
    PGconn* connect_one();

    tamed void execute_pipeline(PGconn* conn,
                                const query_pipe_t& queries,
                                event_pipe_t& events,
                                tamer::event<> e);
#endif
};


inline void DBPool::maybe_flush() {
    if (query_buffer_.size() < params_.pipeline_depth && oldest_ &&
        ((tstamp() - oldest_) < params_.pipeline_timeout))
        return;

    flush();
}

}

#endif
