// -*- mode: c++ -*-
#ifndef PEQUOD_INTERCONNECT_HH
#define PEQUOD_INTERCONNECT_HH
#include <tamer/tamer.hh>
#include <iterator>
#include "mpfd.hh"
#include "pqrpc.hh"
#include "pqremoteclient.hh"

namespace pq {
using tamer::event;
using tamer::preevent;

class Interconnect : public RemoteClient {
  public:
    typedef typename RemoteClient::scan_result scan_result;

    inline Interconnect(tamer::fd fd);
    inline Interconnect(msgpack_fd* fd);

    tamed void subscribe(const String& first, const String& last,
                         int32_t subscriber, event<scan_result> e);
    tamed void unsubscribe(const String& first, const String& last,
                           int32_t subscriber, event<> e);

    tamed void invalidate(const String& first, const String& last,
                          event<> e);

    template <typename R>
    inline void maybe_pace(preevent<R> e);

  private:
    uint32_t need_pace_;
};


inline Interconnect::Interconnect(tamer::fd fd)
    : RemoteClient(fd), need_pace_(1) {
}

inline Interconnect::Interconnect(msgpack_fd* fd)
    : RemoteClient(fd) {
}

template <typename R>
inline void Interconnect::maybe_pace(preevent<R> e) {
    if (need_pace_ % 1024 == 0) {
        need_pace_ = 1;
        pace(e);
    }
    e();
}

} // namespace pq
#endif
