// -*- mode: c++ -*-
#ifndef PEQUOD_MPFD_HH
#define PEQUOD_MPFD_HH
#include <tamer/tamer.hh>
#include <tamer/fd.hh>
#include <sys/uio.h>
#include "msgpack.hh"
#include <vector>
#include <deque>

class msgpack_fd {
  public:
    inline msgpack_fd(tamer::fd fd);
    ~msgpack_fd();

    void write(const Json& j);
    template <typename R>
    void read_request(tamer::preevent<R, Json> done);
    inline void call(const Json& j, tamer::event<Json> reply);
    template <typename R>
    inline void pace(tamer::preevent<R> done);

    inline Json status() const;

  private:
    tamer::fd fd_;

    enum { wrcap = 1 << 17, wrlowat = 1 << 12, wrhiwat = wrcap - 2048 };
    struct wrelem {
        StringAccum sa;
        int pos;
    };
    std::deque<wrelem> wrelem_;
    size_t wrsize_;
    bool wrblocked_;
    tamer::event<> wrwake_;
    tamer::event<> wrkill_;

    enum { rdcap = 1 << 17, rdbatch = 1024 };
    String rdbuf_;
    size_t rdpos_;
    size_t rdlen_;
    int rdquota_;
    msgpack::streaming_parser rdparser_;

    std::deque<tamer::event<Json> > rdreqwait_;
    std::deque<Json> rdreqq_;
    std::deque<tamer::event<Json> > rdreplywait_;
    unsigned long rdreply_seq_;
    tamer::event<> rdwake_;
    tamer::event<> rdkill_;

    enum { wrpacelim = 1 << 20, rdpacelim = 1 << 14 };
    enum { wrpacerecover = 1 << 19, rdpacerecover = 1 << 13 };
    tamer::event<> pacer_;

    void check() const;
    bool dispatch(bool exit_on_request);
    inline bool read_until_request(bool exit_on_request);
    bool read_one_message();
    void write_once();
    inline bool need_pace() const;
    inline bool pace_recovered() const;
    tamed void writer_coroutine();
    tamed void reader_coroutine();
};

inline msgpack_fd::msgpack_fd(tamer::fd fd)
    : fd_(fd), wrsize_(0), wrblocked_(false),
      rdbuf_(String::make_uninitialized(rdcap)), rdpos_(0), rdlen_(0),
      rdquota_(rdbatch), rdreply_seq_(0) {
    wrelem_.push_back(wrelem());
    wrelem_.back().sa.reserve(wrcap);
    wrelem_.back().pos = 0;

    writer_coroutine();
    reader_coroutine();
}

template <typename R>
void msgpack_fd::read_request(tamer::preevent<R, Json> receiver) {
    if (!rdreqq_.empty()) {
        swap(*receiver.result_pointer(), rdreqq_.front());
        rdreqq_.pop_front();
        receiver.unblock();
    } else if (read_until_request(true)) {
        swap(*receiver.result_pointer(), rdparser_.result());
        receiver.unblock();
    } else
        rdreqwait_.push_back(receiver);
}

inline void msgpack_fd::call(const Json& j, tamer::event<Json> done) {
    assert(j.is_a() && j[1].is_i());
    unsigned long seq = j[1].as_i();
    assert(rdreplywait_.empty() || seq == rdreply_seq_ + rdreplywait_.size());
    write(j);
    if (rdreplywait_.empty())
        rdreply_seq_ = seq;
    if (done || !rdreplywait_.empty())
        rdreplywait_.push_back(std::move(done));
    read_until_request(false);
}

inline bool msgpack_fd::read_until_request(bool exit_on_request) {
    while (rdquota_ && read_one_message())
        if (dispatch(exit_on_request))
            return true;
    return false;
}

inline bool msgpack_fd::need_pace() const {
    return wrsize_ > wrpacelim || rdreplywait_.size() > rdpacelim;
}

inline bool msgpack_fd::pace_recovered() const {
    return wrsize_ <= wrpacerecover && rdreplywait_.size() <= rdpacerecover;
}

template <typename R>
inline void msgpack_fd::pace(tamer::preevent<R> done) {
    if (need_pace())
        pacer_ = tamer::distribute(pacer_, std::move(done));
    else
        done();
}

inline Json msgpack_fd::status() const {
    //check();
    return Json().set("buffered_write_bytes", wrsize_)
        .set("buffered_read_bytes", rdlen_ - rdpos_)
        .set("waiting_readers", rdreqwait_.size() + rdreplywait_.size());
}

#endif
