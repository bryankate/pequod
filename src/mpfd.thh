// -*- mode: c++ -*-
#ifndef PEQUOD_MPFD_HH
#define PEQUOD_MPFD_HH
#include <tamer/tamer.hh>
#include <tamer/fd.hh>
#include <sys/uio.h>
#include "msgpack.hh"
#include <vector>
#include <deque>

class msgpack_fd {
  public:
    inline msgpack_fd(tamer::fd fd);
    ~msgpack_fd();

    inline void read(tamer::event<Json> done);
    void write(const Json& j);
    inline void call(const Json& j, tamer::event<Json> reply);

  private:
    tamer::fd fd_;

    enum { wrcap = 1 << 17, wrlowat = 1 << 12, wrhiwat = wrcap - 2048 };
    struct wrelem {
        StringAccum sa;
        int pos;
    };
    std::deque<wrelem> wrelem_;
    size_t wrpos_;
    tamer::event<> wrwake_;
    tamer::event<> wrkill_;

    enum { rdcap = 1 << 17 };
    String rdbuf_;
    size_t rdpos_;
    size_t rdlen_;
    msgpack::streaming_parser rdparser_;

    std::deque<tamer::event<Json> > rdwait_;
    tamer::event<> rdwake_;
    tamer::event<> rdkill_;

    tamed void writer_coroutine();
    tamed void reader_coroutine();
    void check();
};

inline msgpack_fd::msgpack_fd(tamer::fd fd)
    : fd_(fd), wrpos_(0),
      rdbuf_(String::make_uninitialized(rdcap)), rdpos_(0), rdlen_(0) {
    wrelem_.push_back(wrelem());
    wrelem_.back().sa.reserve(wrcap);
    wrelem_.back().pos = 0;

    writer_coroutine();
    reader_coroutine();
}

inline void msgpack_fd::read(tamer::event<Json> done) {
    rdwait_.push_back(done);
    rdwake_();
}

inline void msgpack_fd::call(const Json& j, tamer::event<Json> done) {
    write(j);
    read(done);
}

#endif
